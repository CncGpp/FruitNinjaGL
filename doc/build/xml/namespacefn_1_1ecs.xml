<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="namespacefn_1_1ecs" kind="namespace" language="C++">
    <compoundname>fn::ecs</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacefn_1_1ecs_1a84b32b328a1d0ee6231d01a952c7e3e4" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto fn::ecs::MAX_ENTITY_COUNT</definition>
        <argsstring></argsstring>
        <name>MAX_ENTITY_COUNT</name>
        <initializer>= 1024</initializer>
        <briefdescription>
<para>Numero massimo di entità presenti nel ecs simultaneamente. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/ecs_types.hpp" line="15" column="30" bodyfile="fn/ecs/ecs_types.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefn_1_1ecs_1a56c5d404cdb18fbe6dedfa6fd6c8ca7e" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto fn::ecs::MAX_COMPONENT_COUNT</definition>
        <argsstring></argsstring>
        <name>MAX_COMPONENT_COUNT</name>
        <initializer>= 32</initializer>
        <briefdescription>
<para>Numero massimo di componenti possibili. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/ecs_types.hpp" line="16" column="30" bodyfile="fn/ecs/ecs_types.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefn_1_1ecs_1ab26e1cdc249a41bac6e2c7968b082c75" prot="public" static="yes" mutable="no">
        <type>std::unordered_map&lt; <ref refid="namespacefn_1a9020a8ecbf3010b0b37b01419942de5e" kindref="member">Cid</ref>, std::string &gt;</type>
        <definition>std::unordered_map&lt;Cid, std::string&gt; fn::ecs::cid_to_ctypename</definition>
        <argsstring></argsstring>
        <name>cid_to_ctypename</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Map che consente la conversione fra Cid e typename del componente. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/ecs_types.hpp" line="23" column="34" bodyfile="fn/ecs/ecs_types.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefn_1_1ecs_1a6c6242ea3cb4163a59d72f000e1c2a1e" prot="public" static="yes" mutable="no">
        <type>std::map&lt; std::string, <ref refid="namespacefn_1a9020a8ecbf3010b0b37b01419942de5e" kindref="member">Cid</ref> &gt;</type>
        <definition>std::map&lt;std::string, Cid&gt; fn::ecs::ctypename_to_cid</definition>
        <argsstring></argsstring>
        <name>ctypename_to_cid</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Mappatura inversa fra typename e Cid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/ecs_types.hpp" line="24" column="24" bodyfile="fn/ecs/ecs_types.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacefn_1_1ecs_1adfeb2abe9c5b7220e09ca13511a18dba" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacefn_1a9020a8ecbf3010b0b37b01419942de5e" kindref="member">Cid</ref></type>
        <definition>static Cid fn::ecs::generate_component_id</definition>
        <argsstring>()</argsstring>
        <name>generate_component_id</name>
        <briefdescription>
<para>Genera un Cid univoco per una componente. </para>
        </briefdescription>
        <detaileddescription>
<para>Funzione di utility, genera un Cid univoco progressivo. Il Cid è una potenza di due usabile in OR per generare una signature <simplesect kind="return"><para>Identificativo univoco da usare per una componente </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/ecs_types.hpp" line="33" column="20" bodyfile="fn/ecs/ecs_types.hpp" bodystart="33" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespacefn_1_1ecs_1ad25f618a73775952cd91c48791061618" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr std::string</type>
        <definition>constexpr std::string fn::ecs::get_component_typename</definition>
        <argsstring>()</argsstring>
        <name>get_component_typename</name>
        <briefdescription>
<para>Restituisce il typename C++ di una componente. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>struct o class di una componente. Ritorna il typename di una componente dal suo template. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>stringa contenente il typename della componente </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/ecs_types.hpp" line="46" column="35" bodyfile="fn/ecs/ecs_types.hpp" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespacefn_1_1ecs_1a2ef1f5068a29603fd51f87c07c60563f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="namespacefn_1a9020a8ecbf3010b0b37b01419942de5e" kindref="member">Cid</ref></type>
        <definition>constexpr Cid fn::ecs::get_component_id</definition>
        <argsstring>()</argsstring>
        <name>get_component_id</name>
        <briefdescription>
<para>Restituisce il Cid di una componente. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>struct o class di una componente. Ritorna il Cid che identifica univocamente una componente dal suo template </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Cid che identifica la componente passata nel template </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/ecs_types.hpp" line="57" column="27" bodyfile="fn/ecs/ecs_types.hpp" bodystart="57" bodyend="65"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>namespace interno dell ecs </para>
    </detaileddescription>
    <location file="fn/ecs/ecs_types.hpp" line="14" column="1"/>
  </compounddef>
</doxygen>
