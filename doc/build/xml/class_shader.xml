<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="class_shader" kind="class" language="C++" prot="public">
    <compoundname>Shader</compoundname>
    <includes refid="_shader_8hpp" local="no">fn/core/gl/Shader.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_shader_1a2efad4c14267cae11bd66a2c317864e8" prot="private" static="no" mutable="no">
        <type>GLuint</type>
        <definition>GLuint Shader::m_program_id</definition>
        <argsstring></argsstring>
        <name>m_program_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Shader.hpp" line="83" column="12" bodyfile="fn/core/gl/Shader.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_shader_1ad6e326e26332bbb7e7d11f4c3c20d125" prot="private" static="no" mutable="no">
        <type>fs::path</type>
        <definition>fs::path Shader::m_vShaderPth</definition>
        <argsstring></argsstring>
        <name>m_vShaderPth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Shader.hpp" line="84" column="14" bodyfile="fn/core/gl/Shader.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_shader_1a80fc03fbca6b66a877793cc2ee3e9210" prot="private" static="no" mutable="no">
        <type>fs::path</type>
        <definition>fs::path Shader::m_fShaderPth</definition>
        <argsstring></argsstring>
        <name>m_fShaderPth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Shader.hpp" line="84" column="27" bodyfile="fn/core/gl/Shader.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_shader_1afd56ffe6d14688b71ec5f431ccae434b" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Shader::m_vShaderSrc</definition>
        <argsstring></argsstring>
        <name>m_vShaderSrc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Shader.hpp" line="85" column="17" bodyfile="fn/core/gl/Shader.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_shader_1a4d27646c37f925bc55addad0928b2fa7" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Shader::m_fShaderSrc</definition>
        <argsstring></argsstring>
        <name>m_fShaderSrc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Shader.hpp" line="85" column="30" bodyfile="fn/core/gl/Shader.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_shader_1a623295817b13e9aedc8e105438320800" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Shader::Shader</definition>
        <argsstring>(const fs::path &amp;vertexShaderPath, const fs::path &amp;fragmentShaderPath)</argsstring>
        <name>Shader</name>
        <param>
          <type>const fs::path &amp;</type>
          <declname>vertexShaderPath</declname>
        </param>
        <param>
          <type>const fs::path &amp;</type>
          <declname>fragmentShaderPath</declname>
        </param>
        <briefdescription>
<para>Costruttore. </para>
        </briefdescription>
        <detaileddescription>
<para>Carica, compila ed in fine linka una shader.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vertexShaderPath</parametername>
</parameternamelist>
<parameterdescription>
<para>path al file con il codice del vertex shader </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fragmentShaderPath</parametername>
</parameternamelist>
<parameterdescription>
<para>path al file con il codice del fragment shader </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Shader.hpp" line="35" column="5" bodyfile="fn/core/gl/Shader.cpp" bodystart="3" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="class_shader_1a592934d3b7d99c215a72d2b2db58d8b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::active</definition>
        <argsstring>()</argsstring>
        <name>active</name>
        <briefdescription>
<para>Attiva lo shader. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Shader.hpp" line="38" column="10" bodyfile="fn/core/gl/Shader.cpp" bodystart="20" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="class_shader_1ade0abf2e87ba7a6e0410249ee085ba80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::deactive</definition>
        <argsstring>()</argsstring>
        <name>deactive</name>
        <briefdescription>
<para>Disattiva lo shader. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Shader.hpp" line="41" column="10" bodyfile="fn/core/gl/Shader.cpp" bodystart="25" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="class_shader_1a9e5a285ec9a2f4583f97c4aacbf4c87a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Shader::set</definition>
        <argsstring>(const std::string &amp;name, T value)</argsstring>
        <name>set</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setta il valore di una uniform nello shader. </para>
        </briefdescription>
        <detaileddescription>
<para>La specializzazione del template implementa il set con funzioni di OpenGL per quello specifico data-type. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>data-type dell&apos;uniform che deve essere settato nello shader. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>nome della uniform </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>valore da settare</para>
</parameterdescription>
</parameteritem>
</parameterlist>
 <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-block m-warning" /></para>
<para><simplesect kind="par"><title></title><para>Al momento sono state implementate soltanto le specializzazioni per <programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
</programlisting>,<programlisting filename=".cpp"><codeline><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
</programlisting>,<programlisting filename=".cpp"><codeline><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/></highlight></codeline>
</programlisting> e<programlisting filename=".cpp"><codeline><highlight class="normal">glm::mat4<sp/></highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Shader.hpp" line="59" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_shader_1a55d02c66a03c918a49b514b042762dbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Shader::set</definition>
        <argsstring>(const std::string &amp;name, T *value, size_t count)</argsstring>
        <name>set</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Setta il un array di valori in una uniform nello shader. </para>
        </briefdescription>
        <detaileddescription>
<para>La specializzazione del template implementa il set con funzioni di OpenGL per quello specifico data-type. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>data-type dell&apos;uniform che deve essere settato nello shader. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>nome della uniform </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>puntatore all&apos;array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>numero di valori</para>
</parameterdescription>
</parameteritem>
</parameterlist>
 <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-block m-warning" /></para>
<para><simplesect kind="par"><title></title><para>Al momento sono state implementate soltanto le specializzazioni per <programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
</programlisting>,<programlisting filename=".cpp"><codeline><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
</programlisting>,<programlisting filename=".cpp"><codeline><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/></highlight></codeline>
</programlisting> e<programlisting filename=".cpp"><codeline><highlight class="normal">glm::mat4<sp/></highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Shader.hpp" line="77" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_shader_1a88339d45ded412443a35dabb3fb7631f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>GLuint</type>
        <definition>GLuint Shader::program</definition>
        <argsstring>() const</argsstring>
        <name>program</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>id del programma restituito da OpenGL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Shader.hpp" line="80" column="20" bodyfile="fn/core/gl/Shader.hpp" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_shader_1a468756471311417a0c3591cd6c39e27a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void Shader::set</definition>
        <argsstring>(const std::string &amp;name, int value)</argsstring>
        <name>set</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Shader.hpp" line="91" column="13" bodyfile="fn/core/gl/Shader.hpp" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="class_shader_1a4cda8b91fecb7926bd33fc53190ae618" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void Shader::set</definition>
        <argsstring>(const std::string &amp;name, unsigned int value)</argsstring>
        <name>set</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Shader.hpp" line="97" column="13" bodyfile="fn/core/gl/Shader.hpp" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="class_shader_1a5e6d228ba1cf52fc4d26e8fc974d7537" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void Shader::set</definition>
        <argsstring>(const std::string &amp;name, float value)</argsstring>
        <name>set</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Shader.hpp" line="103" column="13" bodyfile="fn/core/gl/Shader.hpp" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="class_shader_1a4ac7908e476f2f136ec5e45bfc3a8a74" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void Shader::set</definition>
        <argsstring>(const std::string &amp;name, glm::mat4 value)</argsstring>
        <name>set</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>glm::mat4</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Shader.hpp" line="109" column="13" bodyfile="fn/core/gl/Shader.hpp" bodystart="109" bodyend="112"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_shader_1aa9413a27c7e5247d67c624a561e31d3e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Shader::load</definition>
        <argsstring>()</argsstring>
        <name>load</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Shader.hpp" line="86" column="11" bodyfile="fn/core/gl/Shader.cpp" bodystart="30" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="class_shader_1a75512fd8255dc4442d65f1fde2d5feb2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Shader::compile</definition>
        <argsstring>()</argsstring>
        <name>compile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Shader.hpp" line="87" column="11" bodyfile="fn/core/gl/Shader.cpp" bodystart="49" bodyend="100"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Astrazione dello shader di OpenGL. </para>
    </briefdescription>
    <detaileddescription>
<para>La classe consente di gestire in maniera semplificata alcuni aspetti degli <ref refid="class_shader" kindref="compound">Shader</ref> di OpenGL. In particolare:<itemizedlist>
<listitem><para>Compilazione e Link del file sorgente .glsl della coppia vertex shader e fragment shader.</para>
</listitem><listitem><para>Attivazione (e disattivazione) degli shader</para>
</listitem><listitem><para>Set delle uniform con un&apos;interfaccia polimorfica basata su template. </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>Shader</label>
        <link refid="class_shader"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_fShaderSrc</edgelabel>
          <edgelabel>m_vShaderSrc</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="2">
        <label>std::string</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="fn/core/gl/Shader.hpp" line="25" column="1" bodyfile="fn/core/gl/Shader.hpp" bodystart="25" bodyend="88"/>
    <listofallmembers>
      <member refid="class_shader_1a592934d3b7d99c215a72d2b2db58d8b9" prot="public" virt="non-virtual"><scope>Shader</scope><name>active</name></member>
      <member refid="class_shader_1a75512fd8255dc4442d65f1fde2d5feb2" prot="private" virt="non-virtual"><scope>Shader</scope><name>compile</name></member>
      <member refid="class_shader_1ade0abf2e87ba7a6e0410249ee085ba80" prot="public" virt="non-virtual"><scope>Shader</scope><name>deactive</name></member>
      <member refid="class_shader_1aa9413a27c7e5247d67c624a561e31d3e" prot="private" virt="non-virtual"><scope>Shader</scope><name>load</name></member>
      <member refid="class_shader_1a80fc03fbca6b66a877793cc2ee3e9210" prot="private" virt="non-virtual"><scope>Shader</scope><name>m_fShaderPth</name></member>
      <member refid="class_shader_1a4d27646c37f925bc55addad0928b2fa7" prot="private" virt="non-virtual"><scope>Shader</scope><name>m_fShaderSrc</name></member>
      <member refid="class_shader_1a2efad4c14267cae11bd66a2c317864e8" prot="private" virt="non-virtual"><scope>Shader</scope><name>m_program_id</name></member>
      <member refid="class_shader_1ad6e326e26332bbb7e7d11f4c3c20d125" prot="private" virt="non-virtual"><scope>Shader</scope><name>m_vShaderPth</name></member>
      <member refid="class_shader_1afd56ffe6d14688b71ec5f431ccae434b" prot="private" virt="non-virtual"><scope>Shader</scope><name>m_vShaderSrc</name></member>
      <member refid="class_shader_1a88339d45ded412443a35dabb3fb7631f" prot="public" virt="non-virtual"><scope>Shader</scope><name>program</name></member>
      <member refid="class_shader_1a9e5a285ec9a2f4583f97c4aacbf4c87a" prot="public" virt="non-virtual"><scope>Shader</scope><name>set</name></member>
      <member refid="class_shader_1a55d02c66a03c918a49b514b042762dbc" prot="public" virt="non-virtual"><scope>Shader</scope><name>set</name></member>
      <member refid="class_shader_1a468756471311417a0c3591cd6c39e27a" prot="public" virt="non-virtual"><scope>Shader</scope><name>set</name></member>
      <member refid="class_shader_1a4cda8b91fecb7926bd33fc53190ae618" prot="public" virt="non-virtual"><scope>Shader</scope><name>set</name></member>
      <member refid="class_shader_1a5e6d228ba1cf52fc4d26e8fc974d7537" prot="public" virt="non-virtual"><scope>Shader</scope><name>set</name></member>
      <member refid="class_shader_1a4ac7908e476f2f136ec5e45bfc3a8a74" prot="public" virt="non-virtual"><scope>Shader</scope><name>set</name></member>
      <member refid="class_shader_1a623295817b13e9aedc8e105438320800" prot="public" virt="non-virtual"><scope>Shader</scope><name>Shader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
