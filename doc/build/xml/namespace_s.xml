<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="namespace_s" kind="namespace" language="C++">
    <compoundname>S</compoundname>
    <innerclass refid="class_s_1_1_collision" prot="public">S::Collision</innerclass>
    <innerclass refid="class_s_1_1_combo" prot="public">S::Combo</innerclass>
    <innerclass refid="class_s_1_1_physics" prot="public">S::Physics</innerclass>
    <innerclass refid="class_s_1_1_render" prot="public">S::Render</innerclass>
    <innerclass refid="class_s_1_1_system" prot="public">S::System</innerclass>
    <innerclass refid="class_s_1_1_wave" prot="public">S::Wave</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespace_s_1a78e20b9b86d94f411785184b1b2bf29e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::vector&lt; <ref refid="struct_s_1_1_wave_1_1_spawn" kindref="compound">Wave::Spawn</ref> &gt;</type>
        <definition>std::vector&lt;Wave::Spawn&gt; S::Wave::mk_wave&lt; Wave::WaveType::RANDOM &gt;</definition>
        <argsstring>(const unsigned int count)</argsstring>
        <name>Wave::mk_wave&lt; Wave::WaveType::RANDOM &gt;</name>
        <param>
          <type>const unsigned int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/systems/Wave.cpp" line="12" column="6" bodyfile="fn/ecs/systems/Wave.cpp" bodystart="30" bodyend="64" declfile="fn/ecs/systems/Wave.cpp" declline="238" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_s_1aa602ba9ceea2212dff59a50ef216c535" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::vector&lt; <ref refid="struct_s_1_1_wave_1_1_spawn" kindref="compound">Wave::Spawn</ref> &gt;</type>
        <definition>std::vector&lt;Wave::Spawn&gt; S::Wave::mk_wave&lt; Wave::WaveType::LEFT_TO_RIGHT &gt;</definition>
        <argsstring>(const unsigned int count)</argsstring>
        <name>Wave::mk_wave&lt; Wave::WaveType::LEFT_TO_RIGHT &gt;</name>
        <param>
          <type>const unsigned int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/systems/Wave.cpp" line="12" column="6" bodyfile="fn/ecs/systems/Wave.cpp" bodystart="68" bodyend="104" declfile="fn/ecs/systems/Wave.cpp" declline="239" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_s_1a927ed30954c5f150357c19b4af0a001b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::vector&lt; <ref refid="struct_s_1_1_wave_1_1_spawn" kindref="compound">Wave::Spawn</ref> &gt;</type>
        <definition>std::vector&lt;Wave::Spawn&gt; S::Wave::mk_wave&lt; Wave::WaveType::RIGHT_TO_LEFT &gt;</definition>
        <argsstring>(const unsigned int count)</argsstring>
        <name>Wave::mk_wave&lt; Wave::WaveType::RIGHT_TO_LEFT &gt;</name>
        <param>
          <type>const unsigned int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/systems/Wave.cpp" line="12" column="6" bodyfile="fn/ecs/systems/Wave.cpp" bodystart="107" bodyend="144" declfile="fn/ecs/systems/Wave.cpp" declline="240" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespace_s_1a93750cdb9bccb62492a942cfed886d70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::vector&lt; <ref refid="struct_s_1_1_wave_1_1_spawn" kindref="compound">Wave::Spawn</ref> &gt;</type>
        <definition>std::vector&lt;Wave::Spawn&gt; S::Wave::mk_wave&lt; Wave::WaveType::SPOT &gt;</definition>
        <argsstring>(const unsigned int count)</argsstring>
        <name>Wave::mk_wave&lt; Wave::WaveType::SPOT &gt;</name>
        <param>
          <type>const unsigned int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/systems/Wave.cpp" line="12" column="6" bodyfile="fn/ecs/systems/Wave.cpp" bodystart="148" bodyend="184" declfile="fn/ecs/systems/Wave.cpp" declline="241" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>namespace dedicato ai system. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="fn/ecs/ecs.hpp" line="26" column="1"/>
  </compounddef>
</doxygen>
