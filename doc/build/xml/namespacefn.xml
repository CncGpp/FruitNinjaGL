<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="namespacefn" kind="namespace" language="C++">
    <compoundname>fn</compoundname>
    <innerclass refid="classfn_1_1_camera" prot="public">fn::Camera</innerclass>
    <innerclass refid="classfn_1_1_component" prot="public">fn::Component</innerclass>
    <innerclass refid="classfn_1_1_component_array" prot="public">fn::ComponentArray</innerclass>
    <innerclass refid="classfn_1_1_database" prot="public">fn::Database</innerclass>
    <innerclass refid="classfn_1_1_engine" prot="public">fn::Engine</innerclass>
    <innerclass refid="classfn_1_1_entity" prot="public">fn::Entity</innerclass>
    <innerclass refid="classfn_1_1_i_component_array" prot="public">fn::IComponentArray</innerclass>
    <innerclass refid="classfn_1_1log" prot="public">fn::log</innerclass>
    <innernamespace refid="namespacefn_1_1ecs">fn::ecs</innernamespace>
    <innernamespace refid="namespacefn_1_1rand">fn::rand</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacefn_1a6b50c9f0e2b5922bc2348ed71840a29d" prot="public" static="no">
        <type>unsigned int</type>
        <definition>using fn::Eid = typedef unsigned int</definition>
        <argsstring></argsstring>
        <name>Eid</name>
        <briefdescription>
<para><ref refid="classfn_1_1_entity" kindref="compound">Entity</ref> di, Identificativo univoco delle entità </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/ecs_types.hpp" line="18" column="1" bodyfile="fn/ecs/ecs_types.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefn_1a86093d05084c5c29a8cd1b3bfeb99a39" prot="public" static="no">
        <type>std::bitset&lt; <ref refid="namespacefn_1_1ecs_1a56c5d404cdb18fbe6dedfa6fd6c8ca7e" kindref="member">fn::ecs::MAX_COMPONENT_COUNT</ref> &gt;</type>
        <definition>using fn::Signature = typedef std::bitset&lt;fn::ecs::MAX_COMPONENT_COUNT&gt;</definition>
        <argsstring></argsstring>
        <name>Signature</name>
        <briefdescription>
<para>Firma digitale delle componenti di un&apos;entità </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/ecs_types.hpp" line="19" column="1" bodyfile="fn/ecs/ecs_types.hpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefn_1a9020a8ecbf3010b0b37b01419942de5e" prot="public" static="no">
        <type><ref refid="namespacefn_1a86093d05084c5c29a8cd1b3bfeb99a39" kindref="member">Signature</ref></type>
        <definition>using fn::Cid = typedef Signature</definition>
        <argsstring></argsstring>
        <name>Cid</name>
        <briefdescription>
<para><ref refid="classfn_1_1_component" kindref="compound">Component</ref> id, identificativo univoco di una componente. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/ecs_types.hpp" line="20" column="1" bodyfile="fn/ecs/ecs_types.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacefn_1a6f955ff8cb5710b85e0f40534ab46a48" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacefn_1a86093d05084c5c29a8cd1b3bfeb99a39" kindref="member">Signature</ref></type>
        <definition>Signature fn::Sign</definition>
        <argsstring></argsstring>
        <name>Sign</name>
        <initializer>= <ref refid="namespacefn_1adb27cc11cb858c1f6440b80c701b42ed" kindref="member">Sign_template</ref>&lt;Ts ...&gt;()</initializer>
        <briefdescription>
<para>Signature di un insieme di componenti. </para>
        </briefdescription>
        <detaileddescription>
<para>Template variable che consente di calcolare la firma fornendo più entità. Ad esempio <computeroutput> auto s = <ref refid="namespacefn_1a6f955ff8cb5710b85e0f40534ab46a48" kindref="member">Sign&lt;C::Position, C::Movement, C::Render&gt;</ref> </computeroutput> Calcola la signature di un entità avente le componenti <ref refid="struct_c_1_1_position" kindref="compound">C::Position</ref>, <ref refid="struct_c_1_1_movement" kindref="compound">C::Movement</ref> e <ref refid="struct_c_1_1_render" kindref="compound">C::Render</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/ecs_types.hpp" line="88" column="22" bodyfile="fn/ecs/ecs_types.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefn_1a02dad00d9acded67e7e2c632f87b38f0" prot="public" static="no" mutable="no">
        <type><ref refid="core_8hpp_1ac5fa29a44db2883647dc2d4688d899b9" kindref="member">up</ref>&lt; <ref refid="classfn_1_1_engine" kindref="compound">fn::Engine</ref> &gt;</type>
        <definition>up&lt; fn::Engine &gt; fn::engine</definition>
        <argsstring></argsstring>
        <name>engine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/fn.cpp" line="3" column="4" bodyfile="fn/fn.cpp" bodystart="3" bodyend="-1" declfile="fn/fn.hpp" declline="36" declcolumn="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacefn_1adb27cc11cb858c1f6440b80c701b42ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacefn_1a86093d05084c5c29a8cd1b3bfeb99a39" kindref="member">Signature</ref></type>
        <definition>Signature fn::Sign_template</definition>
        <argsstring>()</argsstring>
        <name>Sign_template</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/ecs_types.hpp" line="70" column="12" bodyfile="fn/ecs/ecs_types.hpp" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespacefn_1a3c99c552dd73adfe90cbfc911be589bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacefn_1a86093d05084c5c29a8cd1b3bfeb99a39" kindref="member">Signature</ref></type>
        <definition>Signature fn::Sign_template</definition>
        <argsstring>()</argsstring>
        <name>Sign_template</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/ecs_types.hpp" line="75" column="12" bodyfile="fn/ecs/ecs_types.hpp" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacefn_1a0cd46bf5ad7a2779a487736cef006f71" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void fn::print</definition>
        <argsstring>(fmt::text_style style, const std::string &amp;S, Args ...args)</argsstring>
        <name>print</name>
        <param>
          <type>fmt::text_style</type>
          <declname>style</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>S</declname>
        </param>
        <param>
          <type>Args ...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utl/print.hpp" line="7" column="16" bodyfile="utl/print.hpp" bodystart="7" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacefn_1a26f40f40ee595c0dd3ab16f95b439a8c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void fn::print</definition>
        <argsstring>(const std::string &amp;S, Args ...args)</argsstring>
        <name>print</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>S</declname>
        </param>
        <param>
          <type>Args ...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utl/print.hpp" line="11" column="16" bodyfile="utl/print.hpp" bodystart="11" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacefn_1a3080914708e316219efb88c1522088f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string fn::format_component</definition>
        <argsstring>(T *cmp, std::vector&lt; std::tuple&lt; std::string, std::string, std::string &gt;&gt; attrb)</argsstring>
        <name>format_component</name>
        <param>
          <type>T *</type>
          <declname>cmp</declname>
        </param>
        <param>
          <type>std::vector&lt; std::tuple&lt; std::string, std::string, std::string &gt;&gt;</type>
          <declname>attrb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="utl/print.hpp" line="16" column="13" bodyfile="utl/print.hpp" bodystart="16" bodyend="29"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Root namespace. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="fn/core/Camera.hpp" line="9" column="1"/>
  </compounddef>
</doxygen>
