<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classfn_1_1_database" kind="class" language="C++" prot="public">
    <compoundname>fn::Database</compoundname>
    <includes refid="_database_8hpp" local="no">fn/ecs/Database.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfn_1_1_database_1a1d0798641ed1d452ec2e1e874d790844" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="namespacefn_1a9020a8ecbf3010b0b37b01419942de5e" kindref="member">Cid</ref>, std::shared_ptr&lt; <ref refid="classfn_1_1_i_component_array" kindref="compound">IComponentArray</ref> &gt; &gt;</type>
        <definition>std::unordered_map&lt;Cid, std::shared_ptr&lt;IComponentArray&gt; &gt; fn::Database::m_components</definition>
        <argsstring></argsstring>
        <name>m_components</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="312" column="20" bodyfile="fn/ecs/Database.hpp" bodystart="312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfn_1_1_database_1a76e6218dfbd58c750eeece308e49ffd0" prot="private" static="no" mutable="no">
        <type>std::stack&lt; <ref refid="namespacefn_1a6b50c9f0e2b5922bc2348ed71840a29d" kindref="member">Eid</ref> &gt;</type>
        <definition>std::stack&lt;Eid&gt; fn::Database::eid_pool</definition>
        <argsstring></argsstring>
        <name>eid_pool</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="328" column="12" bodyfile="fn/ecs/Database.hpp" bodystart="328" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfn_1_1_database_1a725bbdb7c4d2a17969a1395375420645" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fn::Database::Database</definition>
        <argsstring>()</argsstring>
        <name>Database</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="17" column="1" bodyfile="fn/ecs/Database.cpp" bodystart="5" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1aa67b0d34c7f18834f8ad85b6b5d2433a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fn::Database::Database</definition>
        <argsstring>(Database const &amp;)=delete</argsstring>
        <name>Database</name>
        <param>
          <type><ref refid="classfn_1_1_database" kindref="compound">Database</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>La copia di un oggetto <ref refid="classfn_1_1_database" kindref="compound">Database</ref> non è consentita. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="20" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1a061bbd0a97559b11605f29a2ec0e0a8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfn_1_1_database" kindref="compound">Database</ref> &amp;</type>
        <definition>Database&amp; fn::Database::operator=</definition>
        <argsstring>(Database const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classfn_1_1_database" kindref="compound">Database</ref> const &amp;</type>
        </param>
        <briefdescription>
<para>L&apos;assegnazione di un oggetto <ref refid="classfn_1_1_database" kindref="compound">Database</ref> non è consentita. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="23" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1adbd5ce43cdf1b603824722f52dcc6cd9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void fn::Database::register_component</definition>
        <argsstring>()</argsstring>
        <name>register_component</name>
        <briefdescription>
<para>Registra la componente nel database. </para>
        </briefdescription>
        <detaileddescription>
<para>Aggiunge un nuovo ComponentArray&lt;T&gt; al database.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>dtype della componente da registrare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="33" column="16" bodyfile="fn/ecs/Database.hpp" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1aeb25f2dd741cceccef3c3d4d44900e46" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool fn::Database::registered</definition>
        <argsstring>()</argsstring>
        <name>registered</name>
        <briefdescription>
<para>Verifica se la componente è registrata. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>componente da verificare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><programlisting filename=".cpp"><codeline><highlight class="keyword">true</highlight><highlight class="normal"><sp/></highlight></codeline>
</programlisting> se la componente è registrata. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="45" column="17" bodyfile="fn/ecs/Database.hpp" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1aea9c0d5cd2f0b970e3f2dbb6ec76c6c6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void fn::Database::set</definition>
        <argsstring>(const Eid eid, Args &amp;&amp;... args)</argsstring>
        <name>set</name>
        <param>
          <type>const <ref refid="namespacefn_1a6b50c9f0e2b5922bc2348ed71840a29d" kindref="member">Eid</ref></type>
          <declname>eid</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Setta una componente di una entità. </para>
        </briefdescription>
        <detaileddescription>
<para>Consente di settare una componente per una specifica entità. La componente da settare è specificabile attraverso il template<programlisting filename=".cpp"><codeline><highlight class="normal">T<sp/></highlight></codeline>
</programlisting>.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="namespacefn_1a6b50c9f0e2b5922bc2348ed71840a29d" kindref="member">fn::Eid</ref><sp/>e<sp/>=<sp/>database.create_entity();</highlight></codeline>
<codeline><highlight class="normal">database.set&lt;<ref refid="struct_c_1_1_movement" kindref="compound">C::Movement</ref>&gt;(e,<sp/>glm::vec3{1.0f,<sp/>16.0f,<sp/>-2.5f},<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glm::vec3{2.0f,<sp/>-1.0f,<sp/>2.0f});</highlight></codeline>
</programlisting></para>
<para>Tutti i parametri in args saranno utilizzati per costruire la componente.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>componente da settare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>parametri da inoltrare al costruttore di<programlisting filename=".cpp"><codeline><highlight class="normal">T<sp/></highlight></codeline>
</programlisting>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eid</parametername>
</parameternamelist>
<parameterdescription>
<para>identificativo dell&apos;entità a cui si vuole settare la componente. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>argomenti da inoltrare al costruttore di<programlisting filename=".cpp"><codeline><highlight class="normal">T<sp/></highlight></codeline>
</programlisting>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="70" column="16" bodyfile="fn/ecs/Database.hpp" bodystart="70" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1a76151f219ed765b834a7b530f915f973" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void fn::Database::set</definition>
        <argsstring>(const Eid eid, T &amp;component)</argsstring>
        <name>set</name>
        <param>
          <type>const <ref refid="namespacefn_1a6b50c9f0e2b5922bc2348ed71840a29d" kindref="member">Eid</ref></type>
          <declname>eid</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>component</declname>
        </param>
        <briefdescription>
<para>Setta una componente di una entità. </para>
        </briefdescription>
        <detaileddescription>
<para>Consente di settare una componente per una specifica entità. La componente da settare è specificabile attraverso il template<programlisting filename=".cpp"><codeline><highlight class="normal">T<sp/></highlight></codeline>
</programlisting>.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="namespacefn_1a6b50c9f0e2b5922bc2348ed71840a29d" kindref="member">fn::Eid</ref><sp/>e<sp/>=<sp/>database.create_entity();</highlight></codeline>
<codeline><highlight class="normal">database.set&lt;<ref refid="struct_c_1_1_movement" kindref="compound">C::Movement</ref>&gt;(e,<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.velocity<sp/>=<sp/>glm::vec3{1.0f,<sp/>16.0f,<sp/>-2.5f},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.spin<sp/>=<sp/>glm::vec3{2.0f,<sp/>-1.0f,<sp/>2.0f}</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>componente da settare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eid</parametername>
</parameternamelist>
<parameterdescription>
<para>identificativo dell&apos;entità a cui si vuole settare la componente. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>component</parametername>
</parameternamelist>
<parameterdescription>
<para>componente da settare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="98" column="16" bodyfile="fn/ecs/Database.hpp" bodystart="98" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1a6c8c9b69f2ecc271c9b5d14be877aef3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T *</type>
        <definition>constexpr T* fn::Database::get</definition>
        <argsstring>(const Eid eid)</argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="namespacefn_1a6b50c9f0e2b5922bc2348ed71840a29d" kindref="member">Eid</ref></type>
          <declname>eid</declname>
        </param>
        <briefdescription>
<para>Recupera il puntatore a una singola componente di un entità. </para>
        </briefdescription>
        <detaileddescription>
<para>Consente di ottenere il puntatore ad una componente per una entità. La componente è specificabile attraverso il template<programlisting filename=".cpp"><codeline><highlight class="normal">T<sp/></highlight></codeline>
</programlisting>.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>pos<sp/>=<sp/>database.get&lt;<ref refid="struct_c_1_1_position" kindref="compound">C::Position</ref>&gt;(eid);</highlight></codeline>
<codeline><highlight class="normal">pos-&gt;<ref refid="struct_c_1_1_position_1a1b26501ace449c713623ad6faf8c507f" kindref="member">position</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>accesso<sp/>alla<sp/>posizione<sp/>della<sp/>componente</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">pos-&gt;rotation;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>accesso<sp/>alla<sp/>rotazione<sp/>della<sp/>componente</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">pos-&gt;translate({1.0f,<sp/>1.0f});<sp/></highlight><highlight class="comment">//<sp/>accesso<sp/>alle<sp/>funzioni<sp/>della<sp/>componente</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>componente a cui si vuole accedere. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eid</parametername>
</parameternamelist>
<parameterdescription>
<para>identificativo dell&apos;entità a cui si vuole accedere. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>puntatore ad una componente T dell&apos;entità eid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="124" column="14" bodyfile="fn/ecs/Database.hpp" bodystart="124" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1a0d4e217aa10c2a8e93c0149182673112" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr std::tuple&lt; T1 *, T2 *, Ts *... &gt;</type>
        <definition>constexpr std::tuple&lt; T1 *, T2 *, Ts *... &gt; fn::Database::get</definition>
        <argsstring>(const Eid eid)</argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="namespacefn_1a6b50c9f0e2b5922bc2348ed71840a29d" kindref="member">Eid</ref></type>
          <declname>eid</declname>
        </param>
        <briefdescription>
<para>Recupera il puntatore a molteplici componenti di un entità. </para>
        </briefdescription>
        <detaileddescription>
<para>Consente di ottenere il puntatore a più componenti per una entità. Le componenti sono specificabili attraverso il template<programlisting filename=".cpp"><codeline><highlight class="normal">T1<sp/></highlight></codeline>
</programlisting>, <programlisting filename=".cpp"><codeline><highlight class="normal">T2<sp/></highlight></codeline>
</programlisting>,<programlisting filename=".cpp"><codeline><highlight class="normal">...Ts<sp/></highlight></codeline>
</programlisting>. La funzione è un template ricorsivo definito in termini di <ref refid="classfn_1_1_database_1a6c8c9b69f2ecc271c9b5d14be877aef3" kindref="member">Database::get&lt;T&gt;</ref>.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>Accedo<sp/>alle<sp/>tre<sp/>componenti<sp/>dividendo<sp/>la<sp/>tupla<sp/>con<sp/>un<sp/>unpacking</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>[pos,<sp/>mov,<sp/>ren]<sp/>=<sp/>database.get&lt;<ref refid="struct_c_1_1_position" kindref="compound">C::Position</ref>,<sp/><ref refid="struct_c_1_1_movement" kindref="compound">C::Movement</ref>,<sp/><ref refid="struct_c_1_1_render" kindref="compound">C::Render</ref>&gt;(eid);</highlight></codeline>
<codeline><highlight class="normal">pos-&gt;translate({1.0f,<sp/>1.0f,<sp/>1.0f});</highlight></codeline>
<codeline><highlight class="normal">pos-&gt;rotate({1.0f,<sp/>1.0f,<sp/>1.0f});</highlight></codeline>
<codeline><highlight class="normal">mov-&gt;accelerate({0.0f,<sp/>1.0f,<sp/>0.0f});</highlight></codeline>
<codeline><highlight class="normal">ren-&gt;<ref refid="struct_c_1_1_render_1aca619e095a780c90c6a242f5498a0984" kindref="member">model</ref>-&gt;draw(...);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T1</parametername>
</parameternamelist>
<parameterdescription>
<para>prima componente a cui si vuole accedere. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T2</parametername>
</parameternamelist>
<parameterdescription>
<para>seconda componente a cui si vuole accedere. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ts</parametername>
</parameternamelist>
<parameterdescription>
<para>altre componenti a cui si vuole accedere. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eid</parametername>
</parameternamelist>
<parameterdescription>
<para>identificativo dell&apos;entità a cui si vuole accedere. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>una std::tuple contenente i puntatori alle componenti. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="151" column="38" bodyfile="fn/ecs/Database.hpp" bodystart="339" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1a7ea1b3a133da8ec164f5a73d6ad3ea9c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool fn::Database::has</definition>
        <argsstring>(const Eid eid)</argsstring>
        <name>has</name>
        <param>
          <type>const <ref refid="namespacefn_1a6b50c9f0e2b5922bc2348ed71840a29d" kindref="member">Eid</ref></type>
          <declname>eid</declname>
        </param>
        <briefdescription>
<para>Verifica se un&apos;entità ha una componente. </para>
        </briefdescription>
        <detaileddescription>
<para>Consente di verificare la presenza di una componente per una entità. La componente è specificabile attraverso il template<programlisting filename=".cpp"><codeline><highlight class="normal">T<sp/></highlight></codeline>
</programlisting>.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classfn_1_1_database_1a7ea1b3a133da8ec164f5a73d6ad3ea9c" kindref="member">has</ref><sp/>=<sp/>database.has&lt;<ref refid="struct_c_1_1_a_a_b_b" kindref="compound">C::AABB</ref>&gt;(eid);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eid</parametername>
</parameternamelist>
<parameterdescription>
<para>identificativo dell&apos;entità. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><programlisting filename=".cpp"><codeline><highlight class="keyword">true</highlight><highlight class="normal"><sp/></highlight></codeline>
</programlisting> se l&apos;entità ha una componente<programlisting filename=".cpp"><codeline><highlight class="normal">T<sp/></highlight></codeline>
</programlisting> valida. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="167" column="17" bodyfile="fn/ecs/Database.hpp" bodystart="167" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1acecaaf75ceeb248a232f0903d8c59c22" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool fn::Database::has</definition>
        <argsstring>(const Eid eid)</argsstring>
        <name>has</name>
        <param>
          <type>const <ref refid="namespacefn_1a6b50c9f0e2b5922bc2348ed71840a29d" kindref="member">Eid</ref></type>
          <declname>eid</declname>
        </param>
        <briefdescription>
<para>Verifica se un&apos;entità ha molteplici componenti. </para>
        </briefdescription>
        <detaileddescription>
<para>Consente di verificare la presenza di più componenti per una entità. Le componenti sono specificabili attraverso il template<programlisting filename=".cpp"><codeline><highlight class="normal">T1<sp/></highlight></codeline>
</programlisting>, <programlisting filename=".cpp"><codeline><highlight class="normal">T2<sp/></highlight></codeline>
</programlisting>,<programlisting filename=".cpp"><codeline><highlight class="normal">...Ts<sp/></highlight></codeline>
</programlisting>. La funzione è un template ricorsivo definito in termini di <ref refid="classfn_1_1_database_1a7ea1b3a133da8ec164f5a73d6ad3ea9c" kindref="member">Database::has&lt;T&gt;</ref>.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classfn_1_1_database_1a7ea1b3a133da8ec164f5a73d6ad3ea9c" kindref="member">has</ref><sp/>=<sp/>database.has&lt;<ref refid="struct_c_1_1_position" kindref="compound">C::Position</ref>,<sp/><ref refid="struct_c_1_1_movement" kindref="compound">C::Movement</ref>,<sp/><ref refid="struct_c_1_1_render" kindref="compound">C::Render</ref>&gt;(eid);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T1</parametername>
</parameternamelist>
<parameterdescription>
<para>prima componente. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T2</parametername>
</parameternamelist>
<parameterdescription>
<para>seconda componente. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ts</parametername>
</parameternamelist>
<parameterdescription>
<para>eventuali altre componenti. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eid</parametername>
</parameternamelist>
<parameterdescription>
<para>identificativo dell&apos;entità. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><programlisting filename=".cpp"><codeline><highlight class="keyword">true</highlight><highlight class="normal"><sp/></highlight></codeline>
</programlisting> se l&apos;entità ha tutte le componenti specificate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="194" column="32" bodyfile="fn/ecs/Database.hpp" bodystart="333" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1aaa5970445abf1946cd46dbd9bdfceaab" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void fn::Database::remove</definition>
        <argsstring>(const Eid eid)</argsstring>
        <name>remove</name>
        <param>
          <type>const <ref refid="namespacefn_1a6b50c9f0e2b5922bc2348ed71840a29d" kindref="member">Eid</ref></type>
          <declname>eid</declname>
        </param>
        <briefdescription>
<para>Rimuove una componente di una entità. </para>
        </briefdescription>
        <detaileddescription>
<para>Consente di rimuovere una componente per una entità. La componente da rimuovere è specificabile attraverso il template<programlisting filename=".cpp"><codeline><highlight class="normal">T<sp/></highlight></codeline>
</programlisting>.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">database.remove&lt;<ref refid="struct_c_1_1_sprite" kindref="compound">C::Sprite</ref>&gt;(e)</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>componente da rimuovere. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eid</parametername>
</parameternamelist>
<parameterdescription>
<para>identificativo dell&apos;entità a cui si vuole settare la componente. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="210" column="16" bodyfile="fn/ecs/Database.hpp" bodystart="210" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1a6add97563ebbd2d6d66a1fef0f0ab345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacefn_1a86093d05084c5c29a8cd1b3bfeb99a39" kindref="member">Signature</ref></type>
        <definition>Signature fn::Database::signature</definition>
        <argsstring>(const Eid eid)</argsstring>
        <name>signature</name>
        <param>
          <type>const <ref refid="namespacefn_1a6b50c9f0e2b5922bc2348ed71840a29d" kindref="member">Eid</ref></type>
          <declname>eid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="215" column="11" bodyfile="fn/ecs/Database.cpp" bodystart="27" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1a88eaf2635d615fbac60889d201de1783" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfn_1_1_entity" kindref="compound">Entity</ref></type>
        <definition>Entity fn::Database::create_entity</definition>
        <argsstring>()</argsstring>
        <name>create_entity</name>
        <briefdescription>
<para>Crea una nuova entità. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>un nuovo oggetto <ref refid="classfn_1_1_entity" kindref="compound">fn::Entity</ref> che wrappa l&apos;enntità creata. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="222" column="9" bodyfile="fn/ecs/Database.cpp" bodystart="11" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1aea45e404da32fa2d76a89e40ae4379da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fn::Database::destroy_entity</definition>
        <argsstring>(Eid eid)</argsstring>
        <name>destroy_entity</name>
        <param>
          <type><ref refid="namespacefn_1a6b50c9f0e2b5922bc2348ed71840a29d" kindref="member">Eid</ref></type>
          <declname>eid</declname>
        </param>
        <briefdescription>
<para>distrugge una entità </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="225" column="6" bodyfile="fn/ecs/Database.cpp" bodystart="18" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1a5e697d058592a4f145feac1f5f978856" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classfn_1_1_entity" kindref="compound">Entity</ref> &gt;</type>
        <definition>std::vector&lt; Entity &gt; fn::Database::having</definition>
        <argsstring>(const Signature signature)</argsstring>
        <name>having</name>
        <param>
          <type>const <ref refid="namespacefn_1a86093d05084c5c29a8cd1b3bfeb99a39" kindref="member">Signature</ref></type>
          <declname>signature</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="228" column="14" bodyfile="fn/ecs/Database.cpp" bodystart="37" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1ad81127928d273481e696175c1e14aa23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>std::vector&lt; <ref refid="classfn_1_1_entity" kindref="compound">Entity</ref> &gt;</type>
        <definition>std::vector&lt; Entity &gt; fn::Database::having</definition>
        <argsstring>()</argsstring>
        <name>having</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="229" column="27" bodyfile="fn/ecs/Database.hpp" bodystart="351" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1a4aea8268cfd611525a371df536b71894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fn::Database::for_each</definition>
        <argsstring>(const Signature signature, std::function&lt; void(Eid e)&gt; fun)</argsstring>
        <name>for_each</name>
        <param>
          <type>const <ref refid="namespacefn_1a86093d05084c5c29a8cd1b3bfeb99a39" kindref="member">Signature</ref></type>
          <declname>signature</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="namespacefn_1a6b50c9f0e2b5922bc2348ed71840a29d" kindref="member">Eid</ref> e)&gt;</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="230" column="6" bodyfile="fn/ecs/Database.cpp" bodystart="57" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1a6ae23019ad7bbd1f6964dd4a978c99cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fn::Database::for_each</definition>
        <argsstring>(const Signature signature, std::function&lt; void(Entity &amp;e)&gt; fun)</argsstring>
        <name>for_each</name>
        <param>
          <type>const <ref refid="namespacefn_1a86093d05084c5c29a8cd1b3bfeb99a39" kindref="member">Signature</ref></type>
          <declname>signature</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="classfn_1_1_entity" kindref="compound">Entity</ref> &amp;e)&gt;</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="231" column="6" bodyfile="fn/ecs/Database.cpp" bodystart="72" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1a5d43164309ce27a88a41c62e16d6e833" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fn::Database::for_each</definition>
        <argsstring>(std::function&lt; void(Entity &amp;e)&gt; fun)</argsstring>
        <name>for_each</name>
        <param>
          <type>std::function&lt; void(<ref refid="classfn_1_1_entity" kindref="compound">Entity</ref> &amp;e)&gt;</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Applica una lambda a tutte le entità con una specifica componente. </para>
        </briefdescription>
        <detaileddescription>
<para>Consente applicare una funzione lambda iterando su tutte le entità che hanno una specifica componente. La funzione applicata è del tipo<programlisting filename=".cpp"><codeline><highlight class="normal">void(Entity&amp;<sp/>e)<sp/></highlight></codeline>
</programlisting> dunque consente di accedere completamente all&apos;entità. La componente richiesta è specificabile attraverso il template<programlisting filename=".cpp"><codeline><highlight class="normal">T<sp/></highlight></codeline>
</programlisting>.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">database.for_each&lt;<ref refid="struct_c_1_1_particle" kindref="compound">C::Particle</ref>&gt;([](Entity&amp;<sp/>e){<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fai<sp/>qualcosa<sp/>con<sp/>`e`<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting></para>
<para>La funzione si divide in due parti, la query per individuare nel database le entità coinvolte e l&apos;applicazione di fun a ciascuna di queste.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>componente. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fun</parametername>
</parameternamelist>
<parameterdescription>
<para>funzione da applicare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="253" column="17" bodyfile="fn/ecs/Database.hpp" bodystart="360" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1a15bebf1c6b024aaace22cf5a513ffc0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fn::Database::for_each</definition>
        <argsstring>(std::function&lt; void(Entity &amp;e)&gt; fun)</argsstring>
        <name>for_each</name>
        <param>
          <type>std::function&lt; void(<ref refid="classfn_1_1_entity" kindref="compound">Entity</ref> &amp;e)&gt;</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Applica una lambda a tutte le entità con un insieme di componenti. </para>
        </briefdescription>
        <detaileddescription>
<para>Consente applicare una funzione lambda iterando su tutte le entità che hanno le componenti specificate. La funzione applicata è del tipo<programlisting filename=".cpp"><codeline><highlight class="normal">void(Entity&amp;<sp/>e)<sp/></highlight></codeline>
</programlisting> dunque consente l&apos;accesso completo all&apos;entità. Le componenti richiesta sono specificabili attraverso i template<programlisting filename=".cpp"><codeline><highlight class="normal">T1<sp/></highlight></codeline>
</programlisting>, <programlisting filename=".cpp"><codeline><highlight class="normal">T2<sp/></highlight></codeline>
</programlisting>,<programlisting filename=".cpp"><codeline><highlight class="normal">...Ts<sp/></highlight></codeline>
</programlisting>.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">database.for_each&lt;<ref refid="struct_c_1_1_position" kindref="compound">C::Position</ref>,<sp/><ref refid="struct_c_1_1_movement" kindref="compound">C::Movement</ref>&gt;([](Entity&amp;<sp/>e){<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fai<sp/>qualcosa<sp/>con<sp/>`e`<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting></para>
<para>La funzione si divide in due parti, la query per individuare nel database le entità coinvolte e l&apos;applicazione di fun a ciascuna di queste.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T1</parametername>
</parameternamelist>
<parameterdescription>
<para>prima componente. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T2</parametername>
</parameternamelist>
<parameterdescription>
<para>seconda componente. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ts</parametername>
</parameternamelist>
<parameterdescription>
<para>eventuali altre componenti. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fun</parametername>
</parameternamelist>
<parameterdescription>
<para>funzione da applicare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="278" column="21" bodyfile="fn/ecs/Database.hpp" bodystart="373" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1af0ad4d7a97e5b69d10b00791c647a168" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fn::Database::for_each</definition>
        <argsstring>(std::function&lt; void(T &amp;e)&gt; fun)</argsstring>
        <name>for_each</name>
        <param>
          <type>std::function&lt; void(T &amp;e)&gt;</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Applica una lambda a tutte le entità con un insieme di componenti. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">database.for_each&lt;<ref refid="struct_c_1_1_render" kindref="compound">C::Render</ref>&gt;([](<ref refid="struct_c_1_1_render" kindref="compound">C::Render</ref>&amp;<sp/>r){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fai<sp/>qualcosa<sp/>con<sp/>`r`<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting></para>
<para>Simile alle precedenti, ma la funzione lambda è del tipo<programlisting filename=".cpp"><codeline><highlight class="normal">void(T&amp;)<sp/></highlight></codeline>
</programlisting> ovvero fornisce direttamente un reference alla componente quando si itera piuttosto che una entità. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="292" column="17" bodyfile="fn/ecs/Database.hpp" bodystart="381" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1ae5b409859bc59383443e45cdc9e2cfdf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fn::Database::for_each</definition>
        <argsstring>(std::function&lt; void(T &amp;, Ts &amp;...)&gt; fun)</argsstring>
        <name>for_each</name>
        <param>
          <type>std::function&lt; void(T &amp;, Ts &amp;...)&gt;</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Applica una lambda a tutte le entità con un insieme di componenti. </para>
        </briefdescription>
        <detaileddescription>
<para>Simile alle precedenti, ma la funzione lambda è del tipo<programlisting filename=".cpp"><codeline><highlight class="normal">void(T&amp;,<sp/>Ts&amp;...)<sp/></highlight></codeline>
</programlisting> ovvero fornisce direttamente un reference alle componenti quando si itera piuttosto che una entità. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="300" column="19" bodyfile="fn/ecs/Database.hpp" bodystart="393" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1a25028bc48da89b30d981000419b620ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fn::Database::for_each</definition>
        <argsstring>(std::function&lt; void(fn::Eid, Ts &amp;...)&gt; fun)</argsstring>
        <name>for_each</name>
        <param>
          <type>std::function&lt; void(<ref refid="namespacefn_1a6b50c9f0e2b5922bc2348ed71840a29d" kindref="member">fn::Eid</ref>, Ts &amp;...)&gt;</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
<para>Applica una lambda a tutte le entità con un insieme di componenti. </para>
        </briefdescription>
        <detaileddescription>
<para>Simile alle precedenti, ma la funzione lambda è del tipo<programlisting filename=".cpp"><codeline><highlight class="normal">void(<ref refid="namespacefn_1a6b50c9f0e2b5922bc2348ed71840a29d" kindref="member">fn::Eid</ref>,<sp/>Ts&amp;...)<sp/></highlight></codeline>
</programlisting> ovvero fornisce anche il <ref refid="namespacefn_1a6b50c9f0e2b5922bc2348ed71840a29d" kindref="member">fn::Eid</ref> insieme ai reference alle componenti quando si itera. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="308" column="17" bodyfile="fn/ecs/Database.hpp" bodystart="412" bodyend="430"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classfn_1_1_database_1a592336fb6840ad8d1f60c99f7b01749b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classfn_1_1_component_array" kindref="compound">ComponentArray</ref>&lt; T &gt; &gt;</type>
        <definition>std::shared_ptr&lt;ComponentArray&lt;T&gt; &gt; fn::Database::getComponentArray</definition>
        <argsstring>()</argsstring>
        <name>getComponentArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="314" column="18" bodyfile="fn/ecs/Database.hpp" bodystart="314" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1adacb2f7f9a9d973acdd52dbd54006963" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Function</type>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
          <param>
            <type>size_t ...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto fn::Database::call</definition>
        <argsstring>(Function f, fn::Eid eid, Tuple t, std::index_sequence&lt; I ... &gt;)</argsstring>
        <name>call</name>
        <param>
          <type>Function</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="namespacefn_1a6b50c9f0e2b5922bc2348ed71840a29d" kindref="member">fn::Eid</ref></type>
          <declname>eid</declname>
        </param>
        <param>
          <type>Tuple</type>
          <declname>t</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; I ... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="323" column="13" bodyfile="fn/ecs/Database.hpp" bodystart="323" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="classfn_1_1_database_1aa71bb6210afd6da326b741bff13e3e50" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Function</type>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
          <param>
            <type>size_t ...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto fn::Database::call</definition>
        <argsstring>(Function f, Tuple t, std::index_sequence&lt; I ... &gt;)</argsstring>
        <name>call</name>
        <param>
          <type>Function</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Tuple</type>
          <declname>t</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; I ... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/Database.hpp" line="325" column="13" bodyfile="fn/ecs/Database.hpp" bodystart="325" bodyend="325"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Classe che gestisce la costruzione, recupero e accesso delle entità. </para>
    </briefdescription>
    <detaileddescription>
<para>Rappresenta appunto un database di tutte le possibili entità e consente di effettuare &apos;query&apos;<itemizedlist>
<listitem><para>recuperare una specifica entità dato il suo eid.</para>
</listitem><listitem><para>recuperare un sottoinsieme delle componenti di un entità dato il suo eid</para>
</listitem><listitem><para>restituire tutte le entità con una specifica firma o sottoinsieme di componenti.</para>
</listitem><listitem><para>iterare lungo i component array applicando funzioni lambda </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="6">
        <label>std::bitset&lt; Bits &gt;</label>
      </node>
      <node id="1">
        <label>fn::Database</label>
        <link refid="classfn_1_1_database"/>
        <childnode refid="2" relation="usage">
          <edgelabel>eid_pool</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_components</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::unordered_map&lt; Cid, std::shared_ptr&lt; fn::IComponentArray &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>std::stack&lt; Eid &gt;</label>
      </node>
      <node id="5">
        <label>fn::IComponentArray</label>
        <link refid="classfn_1_1_i_component_array"/>
      </node>
      <node id="4">
        <label>std::shared_ptr&lt; fn::IComponentArray &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="fn/ecs/Database.hpp" line="15" column="1" bodyfile="fn/ecs/Database.hpp" bodystart="15" bodyend="330"/>
    <listofallmembers>
      <member refid="classfn_1_1_database_1adacb2f7f9a9d973acdd52dbd54006963" prot="private" virt="non-virtual"><scope>fn::Database</scope><name>call</name></member>
      <member refid="classfn_1_1_database_1aa71bb6210afd6da326b741bff13e3e50" prot="private" virt="non-virtual"><scope>fn::Database</scope><name>call</name></member>
      <member refid="classfn_1_1_database_1a88eaf2635d615fbac60889d201de1783" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>create_entity</name></member>
      <member refid="classfn_1_1_database_1a725bbdb7c4d2a17969a1395375420645" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>Database</name></member>
      <member refid="classfn_1_1_database_1aa67b0d34c7f18834f8ad85b6b5d2433a" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>Database</name></member>
      <member refid="classfn_1_1_database_1aea45e404da32fa2d76a89e40ae4379da" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>destroy_entity</name></member>
      <member refid="classfn_1_1_database_1a76e6218dfbd58c750eeece308e49ffd0" prot="private" virt="non-virtual"><scope>fn::Database</scope><name>eid_pool</name></member>
      <member refid="classfn_1_1_database_1a4aea8268cfd611525a371df536b71894" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>for_each</name></member>
      <member refid="classfn_1_1_database_1a6ae23019ad7bbd1f6964dd4a978c99cf" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>for_each</name></member>
      <member refid="classfn_1_1_database_1a5d43164309ce27a88a41c62e16d6e833" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>for_each</name></member>
      <member refid="classfn_1_1_database_1a15bebf1c6b024aaace22cf5a513ffc0e" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>for_each</name></member>
      <member refid="classfn_1_1_database_1af0ad4d7a97e5b69d10b00791c647a168" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>for_each</name></member>
      <member refid="classfn_1_1_database_1ae5b409859bc59383443e45cdc9e2cfdf" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>for_each</name></member>
      <member refid="classfn_1_1_database_1a25028bc48da89b30d981000419b620ee" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>for_each</name></member>
      <member refid="classfn_1_1_database_1a6c8c9b69f2ecc271c9b5d14be877aef3" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>get</name></member>
      <member refid="classfn_1_1_database_1a0d4e217aa10c2a8e93c0149182673112" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>get</name></member>
      <member refid="classfn_1_1_database_1a592336fb6840ad8d1f60c99f7b01749b" prot="private" virt="non-virtual"><scope>fn::Database</scope><name>getComponentArray</name></member>
      <member refid="classfn_1_1_database_1a7ea1b3a133da8ec164f5a73d6ad3ea9c" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>has</name></member>
      <member refid="classfn_1_1_database_1acecaaf75ceeb248a232f0903d8c59c22" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>has</name></member>
      <member refid="classfn_1_1_database_1a5e697d058592a4f145feac1f5f978856" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>having</name></member>
      <member refid="classfn_1_1_database_1ad81127928d273481e696175c1e14aa23" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>having</name></member>
      <member refid="classfn_1_1_database_1a1d0798641ed1d452ec2e1e874d790844" prot="private" virt="non-virtual"><scope>fn::Database</scope><name>m_components</name></member>
      <member refid="classfn_1_1_database_1a061bbd0a97559b11605f29a2ec0e0a8d" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>operator=</name></member>
      <member refid="classfn_1_1_database_1adbd5ce43cdf1b603824722f52dcc6cd9" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>register_component</name></member>
      <member refid="classfn_1_1_database_1aeb25f2dd741cceccef3c3d4d44900e46" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>registered</name></member>
      <member refid="classfn_1_1_database_1aaa5970445abf1946cd46dbd9bdfceaab" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>remove</name></member>
      <member refid="classfn_1_1_database_1aea9c0d5cd2f0b970e3f2dbb6ec76c6c6" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>set</name></member>
      <member refid="classfn_1_1_database_1a76151f219ed765b834a7b530f915f973" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>set</name></member>
      <member refid="classfn_1_1_database_1a6add97563ebbd2d6d66a1fef0f0ab345" prot="public" virt="non-virtual"><scope>fn::Database</scope><name>signature</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
