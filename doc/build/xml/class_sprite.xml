<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="class_sprite" kind="class" language="C++" prot="public">
    <compoundname>Sprite</compoundname>
    <includes refid="_sprite_8hpp" local="no">fn/core/gl/Sprite.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_sprite_1ab583e356e74af2a0293097ac65c37e38" prot="private" static="no" mutable="no">
        <type>glm::vec3</type>
        <definition>glm::vec3 Sprite::m_position</definition>
        <argsstring></argsstring>
        <name>m_position</name>
        <briefdescription>
<para>Posizione topleft dello sprite secondo la viewprojection matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="100" column="11" bodyfile="fn/core/gl/Sprite.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sprite_1a411ee51d00d3d84fd9d6ace318e35d2c" prot="private" static="no" mutable="no">
        <type>glm::vec2</type>
        <definition>glm::vec2 Sprite::m_shape</definition>
        <argsstring></argsstring>
        <name>m_shape</name>
        <briefdescription>
<para>Shape in unità di viewprojection, se una componente è -1 viene determinata dall&apos;altra dall&apos;aspect ratio, se entrambe -1 si usa lo shape della texture. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="101" column="11" bodyfile="fn/core/gl/Sprite.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sprite_1a8408fb05df06b91cfaf5bc3fd3146e0b" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float Sprite::m_scaleXY</definition>
        <argsstring></argsstring>
        <name>m_scaleXY</name>
        <briefdescription>
<para>Scala dello sprite ha effetto solo se m_shape ha entrambi -1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="102" column="7" bodyfile="fn/core/gl/Sprite.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sprite_1ae37d3f7efa950c0c351c38aaee64c33c" prot="private" static="no" mutable="no">
        <type>glm::mat4</type>
        <definition>glm::mat4 Sprite::m_projection</definition>
        <argsstring></argsstring>
        <name>m_projection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="105" column="11" bodyfile="fn/core/gl/Sprite.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sprite_1ac5bb59ebdbc21e94184df056fef110a2" prot="private" static="no" mutable="no">
        <type>glm::mat4</type>
        <definition>glm::mat4 Sprite::m_view</definition>
        <argsstring></argsstring>
        <name>m_view</name>
        <initializer>= glm::mat4(1.0f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="106" column="11" bodyfile="fn/core/gl/Sprite.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sprite_1a0c2c3f516ceb3a1b69b5d8776d24f7b2" prot="private" static="no" mutable="no">
        <type>glm::mat4</type>
        <definition>glm::mat4 Sprite::m_model</definition>
        <argsstring></argsstring>
        <name>m_model</name>
        <initializer>= glm::mat4(1.0f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="107" column="11" bodyfile="fn/core/gl/Sprite.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sprite_1ac5125fb883011ff0a70c2b96366aa406" prot="private" static="no" mutable="no">
        <type><ref refid="_shader_8hpp_1a28c917b60764e5aefe22cc93a1686bb5" kindref="member">ShaderSP</ref></type>
        <definition>ShaderSP Sprite::m_shader</definition>
        <argsstring></argsstring>
        <name>m_shader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="108" column="10" bodyfile="fn/core/gl/Sprite.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sprite_1aa52b92f2aff40e2a1e71f084bda1da51" prot="private" static="no" mutable="no">
        <type><ref refid="_texture_8hpp_1a53d0dd7737c7866b93074c3cb81b88e1" kindref="member">TextureSP</ref></type>
        <definition>TextureSP Sprite::m_texture</definition>
        <argsstring></argsstring>
        <name>m_texture</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="109" column="11" bodyfile="fn/core/gl/Sprite.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sprite_1a749e0190d56fd123905657237198f791" prot="private" static="no" mutable="no">
        <type><ref refid="_mesh_8hpp_1a910252a4814e3e7fd73831186cbce6cb" kindref="member">MeshSP</ref></type>
        <definition>MeshSP Sprite::m_mesh</definition>
        <argsstring></argsstring>
        <name>m_mesh</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="110" column="8" bodyfile="fn/core/gl/Sprite.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sprite_1a977ad3b0a454f230536f15ef1f9de14c" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float Sprite::alpha</definition>
        <argsstring></argsstring>
        <name>alpha</name>
        <initializer>= 1.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="113" column="7" bodyfile="fn/core/gl/Sprite.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="class_sprite_1add5fa840ac2f9c02be497dcb99096e36" prot="protected" static="yes" mutable="no">
        <type>const auto</type>
        <definition>const auto Sprite::S_DEFAULT_VERTEX_SHADER</definition>
        <argsstring></argsstring>
        <name>S_DEFAULT_VERTEX_SHADER</name>
        <initializer>= <ref refid="namespaceassets_1_1dir_1ad8e47cf027d23b46bc216810362cd9b5" kindref="member">assets::dir::shaders</ref> / &quot;sprites&quot; / &quot;default.vglsl&quot;</initializer>
        <briefdescription>
<para><ref refid="class_shader" kindref="compound">Shader</ref> di default per il disegno dei vertici. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="116" column="26" bodyfile="fn/core/gl/Sprite.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sprite_1a889366283ff9608f53257181a3393bd4" prot="protected" static="yes" mutable="no">
        <type>const auto</type>
        <definition>const auto Sprite::S_DEFAULT_FRAGMENT_SHADER</definition>
        <argsstring></argsstring>
        <name>S_DEFAULT_FRAGMENT_SHADER</name>
        <initializer>= <ref refid="namespaceassets_1_1dir_1ad8e47cf027d23b46bc216810362cd9b5" kindref="member">assets::dir::shaders</ref> / &quot;sprites&quot; / &quot;default.fglsl&quot;</initializer>
        <briefdescription>
<para><ref refid="class_shader" kindref="compound">Shader</ref> di default che consente di scegliere anche trasparenza. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="117" column="26" bodyfile="fn/core/gl/Sprite.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sprite_1a603f0fac9576c6f83040efe8e2d98164" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Sprite::Sprite</definition>
        <argsstring>(const fs::path &amp;spritepath, const glm::vec3 &amp;position, const glm::vec2 &amp;shape, const float scaleXY=1.0f)</argsstring>
        <name>Sprite</name>
        <param>
          <type>const fs::path &amp;</type>
          <declname>spritepath</declname>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const glm::vec2 &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>scaleXY</declname>
          <defval>1.0f</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>@ brief Costruisce uno sprite.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spritepath</parametername>
</parameternamelist>
<parameterdescription>
<para>percorso alla texture/immagine da visualizzare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>posizione dove collocare lo sprite (relativa al vertice in alto a destra) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>dimensioni (in larghezza e altezza) che deve avere lo sprite.<itemizedlist>
<listitem><para>se entrambi le componenti sono -1 usa le dimensioni originali,</para>
</listitem><listitem><para>se una delle due componenti è -1 questa è calcolata dalla restante cercando di mantenere le proporzioni dello sprite originale. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scaleXY</parametername>
</parameternamelist>
<parameterdescription>
<para>Fattore di scala delle sprite. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="54" column="1" bodyfile="fn/core/gl/Sprite.cpp" bodystart="4" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="class_sprite_1aa8c936bfcc94c456c9e367fa8679083e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Sprite::Sprite</definition>
        <argsstring>(const fs::path &amp;spritepath, const glm::vec3 &amp;position, const float scaleXY=1.0f)</argsstring>
        <name>Sprite</name>
        <param>
          <type>const fs::path &amp;</type>
          <declname>spritepath</declname>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>scaleXY</declname>
          <defval>1.0f</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="55" column="1" bodyfile="fn/core/gl/Sprite.cpp" bodystart="10" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="class_sprite_1af1728467e957cc7ad22c2fc3c99fa31a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Sprite::Sprite</definition>
        <argsstring>(const fs::path &amp;spritepath, const glm::vec2 &amp;shape, const float scaleXY=1.0f)</argsstring>
        <name>Sprite</name>
        <param>
          <type>const fs::path &amp;</type>
          <declname>spritepath</declname>
        </param>
        <param>
          <type>const glm::vec2 &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>scaleXY</declname>
          <defval>1.0f</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="56" column="1" bodyfile="fn/core/gl/Sprite.cpp" bodystart="11" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="class_sprite_1a84226c59a0453c257bf216217d313c1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Sprite::Sprite</definition>
        <argsstring>(const fs::path &amp;spritepath, const float scaleXY=1.0f)</argsstring>
        <name>Sprite</name>
        <param>
          <type>const fs::path &amp;</type>
          <declname>spritepath</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>scaleXY</declname>
          <defval>1.0f</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="57" column="1" bodyfile="fn/core/gl/Sprite.cpp" bodystart="12" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="class_sprite_1aef3a505d040994fa6ab9593ca6cbff66" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_sprite" kindref="compound">Sprite</ref> &amp;</type>
        <definition>Sprite &amp; Sprite::setPosition</definition>
        <argsstring>(const glm::vec3 &amp;position)</argsstring>
        <name>setPosition</name>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="60" column="16" bodyfile="fn/core/gl/Sprite.cpp" bodystart="15" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="class_sprite_1a71a4157b1c578c6d36c2843c73f5e6e7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const glm::vec3 &amp;</type>
        <definition>const glm::vec3&amp; Sprite::position</definition>
        <argsstring>() const noexcept</argsstring>
        <name>position</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="61" column="17" bodyfile="fn/core/gl/Sprite.hpp" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_sprite_1a0a60d0ccb4ae7d2637a63b21a69fe271" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_sprite" kindref="compound">Sprite</ref> &amp;</type>
        <definition>Sprite &amp; Sprite::setShape</definition>
        <argsstring>(const glm::vec2 &amp;shape)</argsstring>
        <name>setShape</name>
        <param>
          <type>const glm::vec2 &amp;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="62" column="16" bodyfile="fn/core/gl/Sprite.cpp" bodystart="22" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="class_sprite_1a0e5bf1ddbba914b71a848cd50a287d55" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_sprite" kindref="compound">Sprite</ref> &amp;</type>
        <definition>Sprite &amp; Sprite::setSource</definition>
        <argsstring>(const fs::path &amp;spritepath)</argsstring>
        <name>setSource</name>
        <param>
          <type>const fs::path &amp;</type>
          <declname>spritepath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="63" column="16" bodyfile="fn/core/gl/Sprite.cpp" bodystart="28" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="class_sprite_1ac82d2bc42d44652cd92655791bb98b97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Sprite::setAlpha</definition>
        <argsstring>(float alpha)</argsstring>
        <name>setAlpha</name>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="64" column="6" bodyfile="fn/core/gl/Sprite.hpp" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_sprite_1a0cee561dd3eb56de15c968c4d56cd133" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>float</type>
        <definition>virtual float Sprite::width</definition>
        <argsstring>() const</argsstring>
        <name>width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="66" column="16" bodyfile="fn/core/gl/Sprite.hpp" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_sprite_1aa1f6026c1e318e24aac2a58b45dbf3e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>float</type>
        <definition>virtual float Sprite::height</definition>
        <argsstring>() const</argsstring>
        <name>height</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="67" column="16" bodyfile="fn/core/gl/Sprite.hpp" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="class_sprite_1adefd21d4ee578c0f3dd05d127a8ab4eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>glm::vec2</type>
        <definition>virtual glm::vec2 Sprite::shape</definition>
        <argsstring>() const</argsstring>
        <name>shape</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="68" column="20" bodyfile="fn/core/gl/Sprite.hpp" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_sprite_1ae6bf1ddc839bc7d604049d4f492bdd4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Sprite::draw</definition>
        <argsstring>(const fn::Camera &amp;camera, ShaderSP &amp;shader)</argsstring>
        <name>draw</name>
        <param>
          <type>const <ref refid="classfn_1_1_camera" kindref="compound">fn::Camera</ref> &amp;</type>
          <declname>camera</declname>
        </param>
        <param>
          <type><ref refid="_shader_8hpp_1a28c917b60764e5aefe22cc93a1686bb5" kindref="member">ShaderSP</ref> &amp;</type>
          <declname>shader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disegna lo sprite.</para>
<para>Utilizza lo <ref refid="class_shader" kindref="compound">Shader</ref> passato per disegnare lo sprite rispetto la camera. Lo shader deve essere passato già attivato e con le uniform opportunamente settate.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>camera</parametername>
</parameternamelist>
<parameterdescription>
<para>Camera rispetto la quale disegnare lo sprite. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shader</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_shader" kindref="compound">Shader</ref> da utilizzare per il disegno. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="79" column="14" bodyfile="fn/core/gl/Sprite.cpp" bodystart="57" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="class_sprite_1a16641b5112d16041ddad1b33a3e5bb03" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Sprite::draw</definition>
        <argsstring>(const fn::Camera &amp;camera)</argsstring>
        <name>draw</name>
        <param>
          <type>const <ref refid="classfn_1_1_camera" kindref="compound">fn::Camera</ref> &amp;</type>
          <declname>camera</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disegna lo sprite.</para>
<para>Utilizza lo <ref refid="class_shader" kindref="compound">Shader</ref> di default della classe <ref refid="class_sprite" kindref="compound">Sprite</ref> per disegnare lo sprite. Attivazione e set delle uniform sono gestite da questa funzione.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>camera</parametername>
</parameternamelist>
<parameterdescription>
<para>Camera rispetto la quale disegnare lo sprite.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_sprite_1add5fa840ac2f9c02be497dcb99096e36" kindref="member">Sprite::S_DEFAULT_VERTEX_SHADER</ref>, <ref refid="class_sprite_1a889366283ff9608f53257181a3393bd4" kindref="member">Sprite::S_DEFAULT_FRAGMENT_SHADER</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="91" column="14" bodyfile="fn/core/gl/Sprite.cpp" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="class_sprite_1a7d03f27cb9c743bd00a5aa2985ea6a69" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Sprite::onResize</definition>
        <argsstring>()</argsstring>
        <name>onResize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="92" column="14" bodyfile="fn/core/gl/Sprite.cpp" bodystart="74" bodyend="78"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_sprite_1a7002a62a2d13e515b574078ef544b875" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>glm::vec2</type>
        <definition>glm::vec2 Sprite::compute_shape</definition>
        <argsstring>() const</argsstring>
        <name>compute_shape</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calcola la shape dello sprite. <simplesect kind="return"><para>vettore contenente la shape calcolata </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/gl/Sprite.hpp" line="99" column="20" bodyfile="fn/core/gl/Sprite.cpp" bodystart="37" bodyend="55"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Astrazione di uno sprite 2D. </para>
    </briefdescription>
    <detaileddescription>
<para>Il rendering avviene utilizzando una semplice mesh rettangolare composta da due triangoli sulla quale è applicata l&apos;immagine da mostrare come texture.</para>
<sect1 id="class_sprite_1Projection-Matrix">
<title>Matrice di proiezione</title>
<para>Gli sprite sono considerati come elementi di <ref refid="class_g_u_i" kindref="compound">GUI</ref> e quindi la loro rappresentazione avviene rispetto ad una matrice di proiezione fissata a priori.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vsize<sp/>=<sp/><ref refid="namespacecore_1_1gl_1af6e3ec0402093e8ec7edfd89e55c123d" kindref="member">gl::displayport_size</ref>();</highlight></codeline>
<codeline><highlight class="normal">this-&gt;<ref refid="class_sprite_1ae37d3f7efa950c0c351c38aaee64c33c" kindref="member">m_projection</ref><sp/>=<sp/>glm::ortho(0.0f,<sp/>vsize.x,<sp/>vsize.y,<sp/>0.0f,<sp/>-1.0f,<sp/>200.1f);</highlight></codeline>
</programlisting></para>
<para>dove<programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="namespacecore_1_1gl_1af6e3ec0402093e8ec7edfd89e55c123d" kindref="member">gl::displayport_size</ref>()<sp/></highlight></codeline>
</programlisting> specifica le dimensioni virtuali dello schermo sul quale collocare lo sprite.</para>
</sect1>
<sect1 id="class_sprite_1Auto-Size">
<title>Determinazione automatica delle dimensioni</title>
<para>Specificando lo<programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="class_sprite_1adefd21d4ee578c0f3dd05d127a8ab4eb" kindref="member">shape</ref><sp/></highlight></codeline>
</programlisting> dello sprite è possibile determinare le dimensioni ( lunghezza e largezza) dello sprite. Lo shape può anche essere calcolato automaticamente, infatti:<itemizedlist>
<listitem><para>se entrambi le componenti sono -1 usa le dimensioni originali,</para>
</listitem><listitem><para>se una delle due componenti è -1 questa è calcolata dalla restante cercando di mantenere le proporzioni dello sprite originale.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="namespacecore_1_1gl_1af6e3ec0402093e8ec7edfd89e55c123d" kindref="member">gl::displayport_size()</ref>, gl::vw, gl::vh </para>
</simplesect>
</para>
</sect1>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>std::shared_ptr&lt; Texture &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>std::vector&lt; Vertex &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::unordered_map&lt; GLint, GLint &gt;</label>
      </node>
      <node id="13">
        <label>T</label>
      </node>
      <node id="12">
        <label>std::shared_ptr&lt; T &gt;</label>
        <childnode refid="13" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>Mesh</label>
        <link refid="class_mesh"/>
        <childnode refid="11" relation="usage">
          <edgelabel>textures</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>indices</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>vertices</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>Vertex</label>
        <link refid="struct_vertex"/>
      </node>
      <node id="8">
        <label>Shader</label>
        <link refid="class_shader"/>
        <childnode refid="5" relation="usage">
          <edgelabel>m_fShaderSrc</edgelabel>
          <edgelabel>m_vShaderSrc</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>Sprite</label>
        <link refid="class_sprite"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_texture</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>m_shader</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_mesh</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>std::vector&lt; GLuint &gt;</label>
      </node>
      <node id="6">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="3">
        <label>Texture</label>
        <link refid="class_texture"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_parameteri</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_type</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>std::shared_ptr&lt; Mesh &gt;</label>
        <childnode refid="10" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>std::vector&lt; TextureSP &gt;</label>
        <childnode refid="12" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::string</label>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>std::shared_ptr&lt; Shader &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="fn/core/gl/Sprite.hpp" line="41" column="1" bodyfile="fn/core/gl/Sprite.hpp" bodystart="41" bodyend="118"/>
    <listofallmembers>
      <member refid="class_sprite_1a977ad3b0a454f230536f15ef1f9de14c" prot="private" virt="non-virtual"><scope>Sprite</scope><name>alpha</name></member>
      <member refid="class_sprite_1a7002a62a2d13e515b574078ef544b875" prot="private" virt="virtual"><scope>Sprite</scope><name>compute_shape</name></member>
      <member refid="class_sprite_1ae6bf1ddc839bc7d604049d4f492bdd4f" prot="public" virt="virtual"><scope>Sprite</scope><name>draw</name></member>
      <member refid="class_sprite_1a16641b5112d16041ddad1b33a3e5bb03" prot="public" virt="virtual"><scope>Sprite</scope><name>draw</name></member>
      <member refid="class_sprite_1aa1f6026c1e318e24aac2a58b45dbf3e0" prot="public" virt="virtual"><scope>Sprite</scope><name>height</name></member>
      <member refid="class_sprite_1a749e0190d56fd123905657237198f791" prot="private" virt="non-virtual"><scope>Sprite</scope><name>m_mesh</name></member>
      <member refid="class_sprite_1a0c2c3f516ceb3a1b69b5d8776d24f7b2" prot="private" virt="non-virtual"><scope>Sprite</scope><name>m_model</name></member>
      <member refid="class_sprite_1ab583e356e74af2a0293097ac65c37e38" prot="private" virt="non-virtual"><scope>Sprite</scope><name>m_position</name></member>
      <member refid="class_sprite_1ae37d3f7efa950c0c351c38aaee64c33c" prot="private" virt="non-virtual"><scope>Sprite</scope><name>m_projection</name></member>
      <member refid="class_sprite_1a8408fb05df06b91cfaf5bc3fd3146e0b" prot="private" virt="non-virtual"><scope>Sprite</scope><name>m_scaleXY</name></member>
      <member refid="class_sprite_1ac5125fb883011ff0a70c2b96366aa406" prot="private" virt="non-virtual"><scope>Sprite</scope><name>m_shader</name></member>
      <member refid="class_sprite_1a411ee51d00d3d84fd9d6ace318e35d2c" prot="private" virt="non-virtual"><scope>Sprite</scope><name>m_shape</name></member>
      <member refid="class_sprite_1aa52b92f2aff40e2a1e71f084bda1da51" prot="private" virt="non-virtual"><scope>Sprite</scope><name>m_texture</name></member>
      <member refid="class_sprite_1ac5bb59ebdbc21e94184df056fef110a2" prot="private" virt="non-virtual"><scope>Sprite</scope><name>m_view</name></member>
      <member refid="class_sprite_1a7d03f27cb9c743bd00a5aa2985ea6a69" prot="public" virt="virtual"><scope>Sprite</scope><name>onResize</name></member>
      <member refid="class_sprite_1a71a4157b1c578c6d36c2843c73f5e6e7" prot="public" virt="non-virtual"><scope>Sprite</scope><name>position</name></member>
      <member refid="class_sprite_1a889366283ff9608f53257181a3393bd4" prot="protected" virt="non-virtual"><scope>Sprite</scope><name>S_DEFAULT_FRAGMENT_SHADER</name></member>
      <member refid="class_sprite_1add5fa840ac2f9c02be497dcb99096e36" prot="protected" virt="non-virtual"><scope>Sprite</scope><name>S_DEFAULT_VERTEX_SHADER</name></member>
      <member refid="class_sprite_1ac82d2bc42d44652cd92655791bb98b97" prot="public" virt="non-virtual"><scope>Sprite</scope><name>setAlpha</name></member>
      <member refid="class_sprite_1aef3a505d040994fa6ab9593ca6cbff66" prot="public" virt="virtual"><scope>Sprite</scope><name>setPosition</name></member>
      <member refid="class_sprite_1a0a60d0ccb4ae7d2637a63b21a69fe271" prot="public" virt="virtual"><scope>Sprite</scope><name>setShape</name></member>
      <member refid="class_sprite_1a0e5bf1ddbba914b71a848cd50a287d55" prot="public" virt="virtual"><scope>Sprite</scope><name>setSource</name></member>
      <member refid="class_sprite_1adefd21d4ee578c0f3dd05d127a8ab4eb" prot="public" virt="virtual"><scope>Sprite</scope><name>shape</name></member>
      <member refid="class_sprite_1a603f0fac9576c6f83040efe8e2d98164" prot="public" virt="non-virtual"><scope>Sprite</scope><name>Sprite</name></member>
      <member refid="class_sprite_1aa8c936bfcc94c456c9e367fa8679083e" prot="public" virt="non-virtual"><scope>Sprite</scope><name>Sprite</name></member>
      <member refid="class_sprite_1af1728467e957cc7ad22c2fc3c99fa31a" prot="public" virt="non-virtual"><scope>Sprite</scope><name>Sprite</name></member>
      <member refid="class_sprite_1a84226c59a0453c257bf216217d313c1d" prot="public" virt="non-virtual"><scope>Sprite</scope><name>Sprite</name></member>
      <member refid="class_sprite_1a0cee561dd3eb56de15c968c4d56cd133" prot="public" virt="virtual"><scope>Sprite</scope><name>width</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
