<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="class_blade" kind="class" language="C++" prot="public">
    <compoundname>Blade</compoundname>
    <includes refid="_blade_8hpp" local="no">fn/logic/blades/Blade.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_blade_1ae9cbc3d13c5a632d9e0b3b92d51350dc" prot="private" static="no" mutable="no">
        <type><ref refid="_shader_8hpp_1a28c917b60764e5aefe22cc93a1686bb5" kindref="member">ShaderSP</ref></type>
        <definition>ShaderSP Blade::m_shader</definition>
        <argsstring></argsstring>
        <name>m_shader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/logic/blades/Blade.hpp" line="29" column="10" bodyfile="fn/logic/blades/Blade.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_blade_1adcd043617f674425c7ce0ef299b0499f" prot="private" static="no" mutable="no">
        <type><ref refid="_texture_8hpp_1a53d0dd7737c7866b93074c3cb81b88e1" kindref="member">TextureSP</ref></type>
        <definition>TextureSP Blade::blade_texture</definition>
        <argsstring></argsstring>
        <name>blade_texture</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/logic/blades/Blade.hpp" line="30" column="11" bodyfile="fn/logic/blades/Blade.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_blade_1a8a44c27373c61d45c1532a58ae1ea9f0" prot="private" static="no" mutable="no">
        <type>glm::mat4</type>
        <definition>glm::mat4 Blade::m_projection</definition>
        <argsstring></argsstring>
        <name>m_projection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/logic/blades/Blade.hpp" line="31" column="11" bodyfile="fn/logic/blades/Blade.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_blade_1aad9ae2bd6c23727fdbc1505bbe0c0eec" prot="private" static="no" mutable="no">
        <type>glm::mat4</type>
        <definition>glm::mat4 Blade::m_view</definition>
        <argsstring></argsstring>
        <name>m_view</name>
        <initializer>= glm::mat4(1.0f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/logic/blades/Blade.hpp" line="32" column="11" bodyfile="fn/logic/blades/Blade.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_blade_1ad921df2c5744631230f061e165888f89" prot="private" static="no" mutable="no">
        <type>glm::mat4</type>
        <definition>glm::mat4 Blade::m_model</definition>
        <argsstring></argsstring>
        <name>m_model</name>
        <initializer>= glm::mat4(1.0f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/logic/blades/Blade.hpp" line="33" column="11" bodyfile="fn/logic/blades/Blade.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_blade_1a4d4ebf25c3434ae3d2ed2921cfcc49cb" prot="private" static="yes" mutable="no">
        <type>const auto</type>
        <definition>const auto Blade::S_DEFAULT_VERTEX_SHADER</definition>
        <argsstring></argsstring>
        <name>S_DEFAULT_VERTEX_SHADER</name>
        <initializer>= <ref refid="namespaceassets_1_1dir_1ad8e47cf027d23b46bc216810362cd9b5" kindref="member">assets::dir::shaders</ref> / &quot;blades&quot; / &quot;default.vglsl&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/logic/blades/Blade.hpp" line="45" column="26" bodyfile="fn/logic/blades/Blade.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_blade_1a2e3ab5f31b7d9561ff6d882dcd94c0d2" prot="private" static="yes" mutable="no">
        <type>const auto</type>
        <definition>const auto Blade::S_DEFAULT_FRAGMENT_SHADER</definition>
        <argsstring></argsstring>
        <name>S_DEFAULT_FRAGMENT_SHADER</name>
        <initializer>= <ref refid="namespaceassets_1_1dir_1ad8e47cf027d23b46bc216810362cd9b5" kindref="member">assets::dir::shaders</ref> / &quot;blades&quot; / &quot;default.fglsl&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/logic/blades/Blade.hpp" line="46" column="26" bodyfile="fn/logic/blades/Blade.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_blade_1aa8d71020dcb349be867d9be7e5750f48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Blade::Blade</definition>
        <argsstring>()</argsstring>
        <name>Blade</name>
        <briefdescription>
<para>costruttore. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/logic/blades/Blade.hpp" line="23" column="1" bodyfile="fn/logic/blades/Blade.cpp" bodystart="4" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="class_blade_1afa06bd829b6d48746058f390c267e07a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Blade::update</definition>
        <argsstring>(core::seconds delta_t)</argsstring>
        <name>update</name>
        <param>
          <type><ref refid="namespacecore_1af38b4a9ca1ad3ce8caaff19a2bf5398a" kindref="member">core::seconds</ref></type>
          <declname>delta_t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/logic/blades/Blade.hpp" line="25" column="14" bodyfile="fn/logic/blades/Blade.cpp" bodystart="19" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="class_blade_1a1cc78d71bb9a9e61a6dcbba7ba99212d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Blade::draw</definition>
        <argsstring>(const fn::Camera &amp;camera)</argsstring>
        <name>draw</name>
        <param>
          <type>const <ref refid="classfn_1_1_camera" kindref="compound">fn::Camera</ref> &amp;</type>
          <declname>camera</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/logic/blades/Blade.hpp" line="26" column="14" bodyfile="fn/logic/blades/Blade.cpp" bodystart="21" bodyend="98"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_blade_1aee7ed1c02a5da00c4fc097228d6a9d00" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float Blade::thickness</definition>
        <argsstring>(const std::vector&lt; glm::vec2 &gt; &amp;pos, const size_t i)</argsstring>
        <name>thickness</name>
        <param>
          <type>const std::vector&lt; glm::vec2 &gt; &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calcola lo spessore da dare alla lama all&apos;i-esimo indice. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/logic/blades/Blade.hpp" line="36" column="14" bodyfile="fn/logic/blades/Blade.cpp" bodystart="15" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="class_blade_1ad9bf6dc6ed1915f7ab44f644ecc671db" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_vertex" kindref="compound">Vertex</ref></type>
        <definition>Vertex Blade::make_vertex</definition>
        <argsstring>(const glm::vec2 &amp;p, const std::vector&lt; glm::vec2 &gt; &amp;positions, const size_t idx, const float sign)</argsstring>
        <name>make_vertex</name>
        <param>
          <type>const glm::vec2 &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const std::vector&lt; glm::vec2 &gt; &amp;</type>
          <declname>positions</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>sign</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Costruisce un vertice della mesh </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/logic/blades/Blade.hpp" line="39" column="8" bodyfile="fn/logic/blades/Blade.cpp" bodystart="102" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_blade_1abd8745433200d0e03633fd14db010e2f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; glm::vec2 &gt;</type>
        <definition>std::vector&lt; glm::vec2 &gt; Blade::polylineSmooth</definition>
        <argsstring>(const std::vector&lt; glm::vec2 &gt; &amp;input)</argsstring>
        <name>polylineSmooth</name>
        <param>
          <type>const std::vector&lt; glm::vec2 &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Algoritmo di Chaikin </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/logic/blades/Blade.hpp" line="42" column="13" bodyfile="fn/logic/blades/Blade.cpp" bodystart="120" bodyend="141"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Lama che taglia i frutti. </para>
    </briefdescription>
    <detaileddescription>
<para>La classe rappresenta visivamente gli input da trascinamento del mouse sotto-forma di una <computeroutput>Lama</computeroutput> capace di tagliare i frutti.</para>
<para>La lama è generata à partire dalle <ref refid="class_mouse_1a46e3d66c810589f6775bf50ac8c4d99d" kindref="member">Mouse::positions()</ref> le quali sono prima pre-processate attraverso un smoothing (utilizzando l&apos;algoritmo di Chaikin) e successivamente utilizzate per la costruzione di una mesh. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>std::shared_ptr&lt; Texture &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::unordered_map&lt; GLint, GLint &gt;</label>
      </node>
      <node id="8">
        <label>Shader</label>
        <link refid="class_shader"/>
        <childnode refid="5" relation="usage">
          <edgelabel>m_fShaderSrc</edgelabel>
          <edgelabel>m_vShaderSrc</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="1">
        <label>Blade</label>
        <link refid="class_blade"/>
        <childnode refid="2" relation="usage">
          <edgelabel>blade_texture</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>m_shader</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Texture</label>
        <link refid="class_texture"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_parameteri</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_type</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::string</label>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>std::shared_ptr&lt; Shader &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="fn/logic/blades/Blade.hpp" line="19" column="1" bodyfile="fn/logic/blades/Blade.hpp" bodystart="20" bodyend="47"/>
    <listofallmembers>
      <member refid="class_blade_1aa8d71020dcb349be867d9be7e5750f48" prot="public" virt="non-virtual"><scope>Blade</scope><name>Blade</name></member>
      <member refid="class_blade_1adcd043617f674425c7ce0ef299b0499f" prot="private" virt="non-virtual"><scope>Blade</scope><name>blade_texture</name></member>
      <member refid="class_blade_1a1cc78d71bb9a9e61a6dcbba7ba99212d" prot="public" virt="virtual"><scope>Blade</scope><name>draw</name></member>
      <member refid="class_blade_1ad921df2c5744631230f061e165888f89" prot="private" virt="non-virtual"><scope>Blade</scope><name>m_model</name></member>
      <member refid="class_blade_1a8a44c27373c61d45c1532a58ae1ea9f0" prot="private" virt="non-virtual"><scope>Blade</scope><name>m_projection</name></member>
      <member refid="class_blade_1ae9cbc3d13c5a632d9e0b3b92d51350dc" prot="private" virt="non-virtual"><scope>Blade</scope><name>m_shader</name></member>
      <member refid="class_blade_1aad9ae2bd6c23727fdbc1505bbe0c0eec" prot="private" virt="non-virtual"><scope>Blade</scope><name>m_view</name></member>
      <member refid="class_blade_1ad9bf6dc6ed1915f7ab44f644ecc671db" prot="private" virt="non-virtual"><scope>Blade</scope><name>make_vertex</name></member>
      <member refid="class_blade_1abd8745433200d0e03633fd14db010e2f" prot="private" virt="non-virtual"><scope>Blade</scope><name>polylineSmooth</name></member>
      <member refid="class_blade_1a2e3ab5f31b7d9561ff6d882dcd94c0d2" prot="private" virt="non-virtual"><scope>Blade</scope><name>S_DEFAULT_FRAGMENT_SHADER</name></member>
      <member refid="class_blade_1a4d4ebf25c3434ae3d2ed2921cfcc49cb" prot="private" virt="non-virtual"><scope>Blade</scope><name>S_DEFAULT_VERTEX_SHADER</name></member>
      <member refid="class_blade_1aee7ed1c02a5da00c4fc097228d6a9d00" prot="private" virt="non-virtual"><scope>Blade</scope><name>thickness</name></member>
      <member refid="class_blade_1afa06bd829b6d48746058f390c267e07a" prot="public" virt="virtual"><scope>Blade</scope><name>update</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
