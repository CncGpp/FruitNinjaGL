<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="class_text" kind="class" language="C++" prot="public">
    <compoundname>Text</compoundname>
    <basecompoundref refid="class_g_u_i" prot="public" virt="non-virtual">GUI</basecompoundref>
    <includes refid="_text_8hpp" local="no">fn/core/GUI/Text.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_text_1a8d2e39bee772f386cb79557fef0959ad" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Text::m_text</definition>
        <argsstring></argsstring>
        <name>m_text</name>
        <briefdescription>
<para>Testo in formato stringa. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/GUI/Text.hpp" line="60" column="13" bodyfile="fn/core/GUI/Text.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_text_1af5926da92e95f5fbaf9ebf85b23f6f0f" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="_sprite_8hpp_1a8e69bf3c9c9bf7bfb79c2d34468fefee" kindref="member">SpriteSP</ref> &gt;</type>
        <definition>std::vector&lt;SpriteSP&gt; Text::m_characters</definition>
        <argsstring></argsstring>
        <name>m_characters</name>
        <briefdescription>
<para><ref refid="class_sprite" kindref="compound">Sprite</ref> che rappresentano i singoli caratteri. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/GUI/Text.hpp" line="61" column="13" bodyfile="fn/core/GUI/Text.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_text_1a0513acf24e364177fc50e86e62f396fe" prot="private" static="no" mutable="no">
        <type>glm::vec3</type>
        <definition>glm::vec3 Text::m_position</definition>
        <argsstring></argsstring>
        <name>m_position</name>
        <initializer>= glm::vec3{ 0.0f }</initializer>
        <briefdescription>
<para>Posizione del testo. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/GUI/Text.hpp" line="62" column="11" bodyfile="fn/core/GUI/Text.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_text_1aaf9bdc8d7a0f571470197bdf8725fe99" prot="private" static="no" mutable="no">
        <type>glm::vec2</type>
        <definition>glm::vec2 Text::m_shape</definition>
        <argsstring></argsstring>
        <name>m_shape</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/GUI/Text.hpp" line="63" column="11" bodyfile="fn/core/GUI/Text.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_text_1a20af63dd1b4b214d202fdfa5743c3475" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float Text::m_scaleXY</definition>
        <argsstring></argsstring>
        <name>m_scaleXY</name>
        <initializer>= 1.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/GUI/Text.hpp" line="64" column="7" bodyfile="fn/core/GUI/Text.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_text_1a5211db7ea734a8578cda0250a41619e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Text::Text</definition>
        <argsstring>(const std::string &amp;text, glm::vec3 position, const float scaleXY=1.0f)</argsstring>
        <name>Text</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>glm::vec3</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>scaleXY</declname>
          <defval>1.0f</defval>
        </param>
        <briefdescription>
<para>Crea un testo. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>stringa corrispondente al testo da visualizzare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>posizione del testo (rispetto l&apos;angolo in alto a sinistra) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scaleXY</parametername>
</parameternamelist>
<parameterdescription>
<para>fattore di scala del testo. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/GUI/Text.hpp" line="23" column="1" bodyfile="fn/core/GUI/Text.cpp" bodystart="3" bodyend="8"/>
      </memberdef>
      <memberdef kind="function" id="class_text_1abf55420cc606840b275ecdd34759fa3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Text::Text</definition>
        <argsstring>(const std::string &amp;text, const float scaleXY=1.0f)</argsstring>
        <name>Text</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>scaleXY</declname>
          <defval>1.0f</defval>
        </param>
        <briefdescription>
<para>Crea un testo con posizione di default a {0,0,0}. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>stringa corrispondente al testo da visualizzare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scaleXY</parametername>
</parameternamelist>
<parameterdescription>
<para>fattore di scala del testo. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/GUI/Text.hpp" line="31" column="1" bodyfile="fn/core/GUI/Text.cpp" bodystart="10" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="class_text_1a6c0e04bd065018b6a24da4b1a487559b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Text::draw</definition>
        <argsstring>(const fn::Camera &amp;camera) override</argsstring>
        <name>draw</name>
        <reimplements refid="class_g_u_i_1a07ca795505a1a1d17fa74889b406a236">draw</reimplements>
        <param>
          <type>const <ref refid="classfn_1_1_camera" kindref="compound">fn::Camera</ref> &amp;</type>
          <declname>camera</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disegna il testo.</para>
<para>Utilizza lo <ref refid="class_shader" kindref="compound">Shader</ref> di default della classe <ref refid="class_sprite" kindref="compound">Sprite</ref> per disegnare il testo. Attivazione e set delle uniform sono gestite da questa funzione.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>camera</parametername>
</parameternamelist>
<parameterdescription>
<para>Camera rispetto la quale disegnare il testo.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_sprite" kindref="compound">Sprite</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/GUI/Text.hpp" line="43" column="14" bodyfile="fn/core/GUI/Text.cpp" bodystart="12" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="class_text_1a7ac0a5c82ce4b554de8f870c9dc4c44c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Text::onResize</definition>
        <argsstring>() override</argsstring>
        <name>onResize</name>
        <reimplements refid="class_g_u_i_1a2d7329dd55c15d08a167e07e8650e0a1">onResize</reimplements>
        <briefdescription>
<para>Ridimensiona il testo al resize della finestra. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/GUI/Text.hpp" line="46" column="14" bodyfile="fn/core/GUI/Text.cpp" bodystart="23" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="class_text_1ab85b9748c7fbde79de84e1bf238431ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_text" kindref="compound">Text</ref> &amp;</type>
        <definition>Text &amp; Text::setText</definition>
        <argsstring>(const std::string &amp;text)</argsstring>
        <name>setText</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setta il testo da mostrare.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>testo da mostrare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference a<programlisting filename=".cpp"><codeline><highlight class="keyword">this</highlight><highlight class="normal"><sp/></highlight></codeline>
</programlisting> per chiamate a cascata. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/GUI/Text.hpp" line="54" column="6" bodyfile="fn/core/GUI/Text.cpp" bodystart="30" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="class_text_1a620e55af8b1b7940bf367be12523e4b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; Text::text</definition>
        <argsstring>() const</argsstring>
        <name>text</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>testo attuale. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/GUI/Text.hpp" line="57" column="19" bodyfile="fn/core/GUI/Text.hpp" bodystart="57" bodyend="57"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_text_1ad63832ffeaeb772919aeace94dd31f43" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>glm::vec3</type>
        <definition>glm::vec3 Text::position</definition>
        <argsstring>() override</argsstring>
        <name>position</name>
        <reimplements refid="class_g_u_i_1a423f39e95fa43f4cd83a61d7a6530f57">position</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/GUI/Text.hpp" line="66" column="20" bodyfile="fn/core/GUI/Text.cpp" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="class_text_1a0dcaa29824895081742672f2116ef2f0" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>glm::vec2</type>
        <definition>glm::vec2 Text::shape</definition>
        <argsstring>() override</argsstring>
        <name>shape</name>
        <reimplements refid="class_g_u_i_1a113bddd89b43d3169efbf511ead5f358">shape</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/GUI/Text.hpp" line="67" column="20" bodyfile="fn/core/GUI/Text.cpp" bodystart="52" bodyend="55"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Classe che gestisce il disegno di un testo. </para>
    </briefdescription>
    <detaileddescription>
<para>Il testo è semplicemente disegnato ricorrendo ad uno <computeroutput>spritefont</computeroutput> ovvero ogni carattere corrisponde ad uno sprite.</para>
<para><bold>NOTA</bold>: Al momento sono disponibili soltanto gli sprite dei i caratteri numerici e il <computeroutput>:</computeroutput>. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>GUI</label>
        <link refid="class_g_u_i"/>
      </node>
      <node id="1">
        <label>Text</label>
        <link refid="class_text"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7">
        <label>std::bitset&lt; Bits &gt;</label>
      </node>
      <node id="4">
        <label>std::shared_ptr&lt; Sprite &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>GUI</label>
        <link refid="class_g_u_i"/>
      </node>
      <node id="9">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="1">
        <label>Text</label>
        <link refid="class_text"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_characters</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_text</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>C::Sprite</label>
        <link refid="struct_c_1_1_sprite"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>sprite</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::vector&lt; SpriteSP &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>fn::Component&lt; Sprite &gt;</label>
        <link refid="classfn_1_1_component"/>
        <childnode refid="7" relation="usage">
          <edgelabel>cid</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>ctypename</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::string</label>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="fn/core/GUI/Text.hpp" line="14" column="1" bodyfile="fn/core/GUI/Text.hpp" bodystart="14" bodyend="68"/>
    <listofallmembers>
      <member refid="class_text_1a6c0e04bd065018b6a24da4b1a487559b" prot="public" virt="virtual"><scope>Text</scope><name>draw</name></member>
      <member refid="class_text_1af5926da92e95f5fbaf9ebf85b23f6f0f" prot="private" virt="non-virtual"><scope>Text</scope><name>m_characters</name></member>
      <member refid="class_text_1a0513acf24e364177fc50e86e62f396fe" prot="private" virt="non-virtual"><scope>Text</scope><name>m_position</name></member>
      <member refid="class_text_1a20af63dd1b4b214d202fdfa5743c3475" prot="private" virt="non-virtual"><scope>Text</scope><name>m_scaleXY</name></member>
      <member refid="class_text_1aaf9bdc8d7a0f571470197bdf8725fe99" prot="private" virt="non-virtual"><scope>Text</scope><name>m_shape</name></member>
      <member refid="class_text_1a8d2e39bee772f386cb79557fef0959ad" prot="private" virt="non-virtual"><scope>Text</scope><name>m_text</name></member>
      <member refid="class_text_1a7ac0a5c82ce4b554de8f870c9dc4c44c" prot="public" virt="virtual"><scope>Text</scope><name>onResize</name></member>
      <member refid="class_text_1ad63832ffeaeb772919aeace94dd31f43" prot="private" virt="virtual"><scope>Text</scope><name>position</name></member>
      <member refid="class_text_1ab85b9748c7fbde79de84e1bf238431ae" prot="public" virt="non-virtual"><scope>Text</scope><name>setText</name></member>
      <member refid="class_text_1a0dcaa29824895081742672f2116ef2f0" prot="private" virt="virtual"><scope>Text</scope><name>shape</name></member>
      <member refid="class_text_1a5211db7ea734a8578cda0250a41619e2" prot="public" virt="non-virtual"><scope>Text</scope><name>Text</name></member>
      <member refid="class_text_1abf55420cc606840b275ecdd34759fa3b" prot="public" virt="non-virtual"><scope>Text</scope><name>Text</name></member>
      <member refid="class_text_1a620e55af8b1b7940bf367be12523e4b5" prot="public" virt="non-virtual"><scope>Text</scope><name>text</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
