<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="class_s_1_1_wave" kind="class" language="C++" prot="public">
    <compoundname>S::Wave</compoundname>
    <basecompoundref refid="class_s_1_1_system" prot="public" virt="non-virtual">S::System</basecompoundref>
    <includes refid="_wave_8hpp" local="no">fn/ecs/systems/Wave.hpp</includes>
    <innerclass refid="struct_s_1_1_wave_1_1_spawn" prot="protected">S::Wave::Spawn</innerclass>
      <sectiondef kind="protected-type">
      <memberdef kind="enum" id="class_s_1_1_wave_1a7146b9746888f650052fed4edd5af106" prot="protected" static="no" strong="yes">
        <type>int</type>
        <name>WaveType</name>
        <enumvalue id="class_s_1_1_wave_1a7146b9746888f650052fed4edd5af106a170e02e86972c2be8559884cc3c12254" prot="protected">
          <name>RANDOM</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_1_1_wave_1a7146b9746888f650052fed4edd5af106a3ba9c296d0eb2686b837d4f10e27243b" prot="protected">
          <name>LEFT_TO_RIGHT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_1_1_wave_1a7146b9746888f650052fed4edd5af106a132e23a80cef8d694ea55b6e790b9e4a" prot="protected">
          <name>RIGHT_TO_LEFT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_s_1_1_wave_1a7146b9746888f650052fed4edd5af106a5bac85a0c611ddef64ab0dfb383056f4" prot="protected">
          <name>SPOT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Tipologia di wave. </para>
        </briefdescription>
        <detaileddescription>
<para>Ognuna di queste tipologie corrisponde ad una specializzazione del tameplate <ref refid="class_s_1_1_wave_1ab277a85a98dadbb6f021584bd766351a" kindref="member">Wave::mk_wave</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/systems/Wave.hpp" line="28" column="1" bodyfile="fn/ecs/systems/Wave.hpp" bodystart="28" bodyend="33"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_s_1_1_wave_1a20a21a5dfcbabc04ac93e4ce3f7510ef" prot="private" static="no" mutable="no">
        <type><ref refid="classfn_1_1_database" kindref="compound">fn::Database</ref> &amp;</type>
        <definition>fn::Database&amp; S::Wave::m_database</definition>
        <argsstring></argsstring>
        <name>m_database</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/systems/Wave.hpp" line="70" column="14" bodyfile="fn/ecs/systems/Wave.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_s_1_1_wave_1ac9159c817202f70f06d96cb6474a7a00" prot="private" static="no" mutable="no">
        <type>std::queue&lt; <ref refid="struct_s_1_1_wave_1_1_spawn" kindref="compound">Spawn</ref> &gt;</type>
        <definition>std::queue&lt;Spawn&gt; S::Wave::m_sheduled_waves</definition>
        <argsstring></argsstring>
        <name>m_sheduled_waves</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/systems/Wave.hpp" line="71" column="12" bodyfile="fn/ecs/systems/Wave.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_s_1_1_wave_1ab28ffe9775164c758769e9d8b17cc843" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>S::Wave::Wave</definition>
        <argsstring>(fn::Database &amp;database)</argsstring>
        <name>Wave</name>
        <param>
          <type><ref refid="classfn_1_1_database" kindref="compound">fn::Database</ref> &amp;</type>
          <declname>database</declname>
        </param>
        <briefdescription>
<para>Costruttore. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/systems/Wave.hpp" line="19" column="1" bodyfile="fn/ecs/systems/Wave.cpp" bodystart="6" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="class_s_1_1_wave_1adae3586822454674f371acd4e1a0ec9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void S::Wave::update</definition>
        <argsstring>(core::seconds delta_t) override</argsstring>
        <name>update</name>
        <reimplements refid="class_s_1_1_system_1a4d2625627ed7fdd2c9af66bfcd5f4326">update</reimplements>
        <param>
          <type><ref refid="namespacecore_1af38b4a9ca1ad3ce8caaff19a2bf5398a" kindref="member">core::seconds</ref></type>
          <declname>delta_t</declname>
        </param>
        <briefdescription>
<para>Aggiorna lo stato interno del sistema. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>delta_t</parametername>
</parameternamelist>
<parameterdescription>
<para>intervallo di tempo gioco trascorso. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/systems/Wave.hpp" line="20" column="14" bodyfile="fn/ecs/systems/Wave.cpp" bodystart="12" bodyend="26"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_s_1_1_wave_1ab277a85a98dadbb6f021584bd766351a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="class_s_1_1_wave_1a7146b9746888f650052fed4edd5af106" kindref="member">WaveType</ref></type>
            <declname>type</declname>
            <defname>type</defname>
          </param>
        </templateparamlist>
        <type>std::vector&lt; <ref refid="struct_s_1_1_wave_1_1_spawn" kindref="compound">Spawn</ref> &gt;</type>
        <definition>template std::vector&lt; Wave::Spawn &gt; S::Wave::mk_wave&lt; Wave::WaveType::SPOT &gt;</definition>
        <argsstring>(const unsigned int count=2)</argsstring>
        <name>mk_wave</name>
        <param>
          <type>const unsigned int</type>
          <declname>count</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
<para>Costruisce una ondata. </para>
        </briefdescription>
        <detaileddescription>
<para>Esiste una specializzazione di questa funzione per ogni possibile valore in WaveType.<itemizedlist>
<listitem><para>RANDOM: I frutti sono creati in maniera casuale per posizione, rotazione, velocità, spin e fruit.</para>
</listitem><listitem><para>LEFT_TO_RIGHT: I frutti sono tutti dello stesso tipo e lanciati da sinistra verso destra.</para>
</listitem><listitem><para>RIGHT_TO_LEFT: Simile al precedente ma l&apos;ordine è da destra verso sinistra.</para>
</listitem><listitem><para>SPOT: I frutti sono tutti dello stesso tipo e lanciati casualmente.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>tipologia dell&apos;ondata. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>numero di frutti dell&apos;ondata. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vettore con gli spawn creati. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/systems/Wave.hpp" line="61" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_s_1_1_wave_1a9f6051e1c2322e50a7cb19f2d34ab0bf" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_e_1_1_fruit" kindref="compound">E::Fruit</ref></type>
        <definition>E::Fruit S::Wave::mk_fruit</definition>
        <argsstring>(Spawn &amp;s)</argsstring>
        <name>mk_fruit</name>
        <param>
          <type><ref refid="struct_s_1_1_wave_1_1_spawn" kindref="compound">Spawn</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Costruisce una entità da uno <ref refid="struct_s_1_1_wave_1_1_spawn" kindref="compound">Spawn</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/systems/Wave.hpp" line="64" column="11" bodyfile="fn/ecs/systems/Wave.cpp" bodystart="188" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="class_s_1_1_wave_1a07d577d7b4aaaec60f3185637bdd7931" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void S::Wave::next_wave</definition>
        <argsstring>()</argsstring>
        <name>next_wave</name>
        <briefdescription>
<para>Genera la prossima ondata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/ecs/systems/Wave.hpp" line="67" column="6" bodyfile="fn/ecs/systems/Wave.cpp" bodystart="195" bodyend="235"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Sistema che gestisce la le ondate di frutti. </para>
    </briefdescription>
    <detaileddescription>
<para>La classe <ref refid="class_s_1_1_physics" kindref="compound">Physics</ref> consente di gestire il lancio di frutti, raggruppandole in <computeroutput>ondate</computeroutput> di vario tipo e stabilendo i tempi di lancio. I componenti coinvolti dal sistema sono: <ref refid="struct_c_1_1_position" kindref="compound">C::Position</ref>, <ref refid="struct_c_1_1_movement" kindref="compound">C::Movement</ref> e <ref refid="struct_c_1_1_fruit" kindref="compound">C::Fruit</ref>. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>S::System</label>
        <link refid="class_s_1_1_system"/>
      </node>
      <node id="1">
        <label>S::Wave</label>
        <link refid="class_s_1_1_wave"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>S::System</label>
        <link refid="class_s_1_1_system"/>
      </node>
      <node id="7">
        <label>std::bitset&lt; Bits &gt;</label>
      </node>
      <node id="3">
        <label>std::queue&lt; S::Wave::Spawn &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>fn::Database</label>
        <link refid="classfn_1_1_database"/>
        <childnode refid="16" relation="usage">
          <edgelabel>eid_pool</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>m_components</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>std::unordered_map&lt; Cid, std::shared_ptr&lt; fn::IComponentArray &gt; &gt;</label>
        <childnode refid="18" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>fn::Component&lt; Position &gt;</label>
        <link refid="classfn_1_1_component"/>
        <childnode refid="7" relation="usage">
          <edgelabel>cid</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>ctypename</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>std::stack&lt; Eid &gt;</label>
      </node>
      <node id="19">
        <label>fn::IComponentArray</label>
        <link refid="classfn_1_1_i_component_array"/>
      </node>
      <node id="9">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="1">
        <label>S::Wave</label>
        <link refid="class_s_1_1_wave"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_sheduled_waves</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_database</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>std::shared_ptr&lt; fn::IComponentArray &gt;</label>
        <childnode refid="19" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>C::Fruit</label>
        <link refid="struct_c_1_1_fruit"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>fruit</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>Fruits</label>
        <link refid="class_fruits"/>
        <childnode refid="8" relation="usage">
          <edgelabel>half_back_filename</edgelabel>
          <edgelabel>half_front_filename</edgelabel>
          <edgelabel>name</edgelabel>
          <edgelabel>whole_filename</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>apple_red</edgelabel>
          <edgelabel>banana</edgelabel>
          <edgelabel>coconut</edgelabel>
          <edgelabel>honeydew_melon</edgelabel>
          <edgelabel>kiwi</edgelabel>
          <edgelabel>lemon</edgelabel>
          <edgelabel>lime</edgelabel>
          <edgelabel>orange</edgelabel>
          <edgelabel>pear</edgelabel>
          <edgelabel>pepper_green</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>C::Movement</label>
        <link refid="struct_c_1_1_movement"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>S::Wave::Spawn</label>
        <link refid="struct_s_1_1_wave_1_1_spawn"/>
        <childnode refid="5" relation="usage">
          <edgelabel>fruit</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>position</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>movement</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>fn::Component&lt; Movement &gt;</label>
        <link refid="classfn_1_1_component"/>
        <childnode refid="7" relation="usage">
          <edgelabel>cid</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>ctypename</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>C::Position</label>
        <link refid="struct_c_1_1_position"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>fn::Component&lt; Fruit &gt;</label>
        <link refid="classfn_1_1_component"/>
        <childnode refid="7" relation="usage">
          <edgelabel>cid</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>ctypename</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::string</label>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="fn/ecs/systems/Wave.hpp" line="15" column="1" bodyfile="fn/ecs/systems/Wave.hpp" bodystart="16" bodyend="72"/>
    <listofallmembers>
      <member refid="class_s_1_1_wave_1a20a21a5dfcbabc04ac93e4ce3f7510ef" prot="private" virt="non-virtual"><scope>S::Wave</scope><name>m_database</name></member>
      <member refid="class_s_1_1_wave_1ac9159c817202f70f06d96cb6474a7a00" prot="private" virt="non-virtual"><scope>S::Wave</scope><name>m_sheduled_waves</name></member>
      <member refid="class_s_1_1_wave_1a9f6051e1c2322e50a7cb19f2d34ab0bf" prot="protected" virt="non-virtual"><scope>S::Wave</scope><name>mk_fruit</name></member>
      <member refid="class_s_1_1_wave_1ab277a85a98dadbb6f021584bd766351a" prot="protected" virt="non-virtual"><scope>S::Wave</scope><name>mk_wave</name></member>
      <member refid="class_s_1_1_wave_1a07d577d7b4aaaec60f3185637bdd7931" prot="protected" virt="non-virtual"><scope>S::Wave</scope><name>next_wave</name></member>
      <member refid="class_s_1_1_wave_1adae3586822454674f371acd4e1a0ec9c" prot="public" virt="virtual"><scope>S::Wave</scope><name>update</name></member>
      <member refid="class_s_1_1_wave_1ab28ffe9775164c758769e9d8b17cc843" prot="public" virt="non-virtual"><scope>S::Wave</scope><name>Wave</name></member>
      <member refid="class_s_1_1_wave_1a7146b9746888f650052fed4edd5af106" prot="protected" virt="non-virtual"><scope>S::Wave</scope><name>WaveType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
