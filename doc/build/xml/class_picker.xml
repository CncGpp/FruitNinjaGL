<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="class_picker" kind="class" language="C++" prot="public">
    <compoundname>Picker</compoundname>
    <includes refid="_picker_8hpp" local="no">fn/core/input/Picker.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_picker_1ac8ae02c4d9fb9c6bb7fac1fb8fe3a98c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Picker::inbegin</definition>
        <argsstring></argsstring>
        <name>inbegin</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/input/Picker.hpp" line="81" column="6" bodyfile="fn/core/input/Picker.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_picker_1a5c2beb1df018889079eeb0d31967ff38" prot="private" static="no" mutable="no">
        <type><ref refid="classfn_1_1_database" kindref="compound">fn::Database</ref> &amp;</type>
        <definition>fn::Database&amp; Picker::m_database</definition>
        <argsstring></argsstring>
        <name>m_database</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/input/Picker.hpp" line="82" column="14" bodyfile="fn/core/input/Picker.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_picker_1ac0b79996723201972ef92e6a5cbdbf67" prot="private" static="no" mutable="no">
        <type><ref refid="_shader_8hpp_1a28c917b60764e5aefe22cc93a1686bb5" kindref="member">ShaderSP</ref></type>
        <definition>ShaderSP Picker::shader</definition>
        <argsstring></argsstring>
        <name>shader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/input/Picker.hpp" line="84" column="10" bodyfile="fn/core/input/Picker.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="class_picker_1ab480596bec6dc7bf438a60357be53aae" prot="protected" static="yes" mutable="no">
        <type>const auto</type>
        <definition>const auto Picker::S_DEFAULT_VERTEX_SHADER</definition>
        <argsstring></argsstring>
        <name>S_DEFAULT_VERTEX_SHADER</name>
        <initializer>= <ref refid="namespaceassets_1_1dir_1ad8e47cf027d23b46bc216810362cd9b5" kindref="member">assets::dir::shaders</ref> / &quot;picking&quot; / &quot;default.vglsl&quot;</initializer>
        <briefdescription>
<para><ref refid="class_shader" kindref="compound">Shader</ref> di default. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/input/Picker.hpp" line="87" column="26" bodyfile="fn/core/input/Picker.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_picker_1a1818bcef3d377d2397ba2d40ec1c5c82" prot="protected" static="yes" mutable="no">
        <type>const auto</type>
        <definition>const auto Picker::S_DEFAULT_FRAGMENT_SHADER</definition>
        <argsstring></argsstring>
        <name>S_DEFAULT_FRAGMENT_SHADER</name>
        <initializer>= <ref refid="namespaceassets_1_1dir_1ad8e47cf027d23b46bc216810362cd9b5" kindref="member">assets::dir::shaders</ref> / &quot;picking&quot; / &quot;color_picking.fglsl&quot;</initializer>
        <briefdescription>
<para><ref refid="class_shader" kindref="compound">Shader</ref> di default, disegna con un colore fissato. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/input/Picker.hpp" line="88" column="26" bodyfile="fn/core/input/Picker.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_picker_1a88c5f57a2cdd688e080d3ca949f609d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Picker::Picker</definition>
        <argsstring>(fn::Database &amp;database)</argsstring>
        <name>Picker</name>
        <param>
          <type><ref refid="classfn_1_1_database" kindref="compound">fn::Database</ref> &amp;</type>
          <declname>database</declname>
        </param>
        <briefdescription>
<para>Costruttore. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>database</parametername>
</parameternamelist>
<parameterdescription>
<para>Database con le entità. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/input/Picker.hpp" line="30" column="1" bodyfile="fn/core/input/Picker.cpp" bodystart="5" bodyend="8"/>
      </memberdef>
      <memberdef kind="function" id="class_picker_1ac5d1a34383c7636fa4ad82575bbb0607" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Picker::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Inizializza il picking. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/input/Picker.hpp" line="33" column="6" bodyfile="fn/core/input/Picker.cpp" bodystart="10" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="class_picker_1a3c2a862e2d09c5ed36a33e1280cd5434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Picker::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>Finalizza il picking. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/input/Picker.hpp" line="36" column="6" bodyfile="fn/core/input/Picker.cpp" bodystart="18" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="class_picker_1a6b88333b808ec80b96338249dca9965f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Picker::draw</definition>
        <argsstring>(const fn::Camera &amp;camera, fn::Eid eid)</argsstring>
        <name>draw</name>
        <param>
          <type>const <ref refid="classfn_1_1_camera" kindref="compound">fn::Camera</ref> &amp;</type>
          <declname>camera</declname>
        </param>
        <param>
          <type><ref refid="namespacefn_1a6b50c9f0e2b5922bc2348ed71840a29d" kindref="member">fn::Eid</ref></type>
          <declname>eid</declname>
        </param>
        <briefdescription>
<para>Disegna il volume di un entità sul framebuffer per il picking. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>camera</parametername>
</parameternamelist>
<parameterdescription>
<para>Camera rispetto la quale disegnare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eid</parametername>
</parameternamelist>
<parameterdescription>
<para>Identificativo dell&apos;entità da disegnare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/input/Picker.hpp" line="44" column="6" bodyfile="fn/core/input/Picker.cpp" bodystart="25" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="class_picker_1aa4238a506b3e33ccf7224ce403551511" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Itr</type>
          </param>
        </templateparamlist>
        <type>std::unordered_set&lt; <ref refid="namespacefn_1a6b50c9f0e2b5922bc2348ed71840a29d" kindref="member">fn::Eid</ref> &gt;</type>
        <definition>std::unordered_set&lt; fn::Eid &gt; Picker::pick</definition>
        <argsstring>(const Itr &amp;coords)</argsstring>
        <name>pick</name>
        <param>
          <type>const Itr &amp;</type>
          <declname>coords</declname>
        </param>
        <briefdescription>
<para>Effettua il picking di una collezione di coordinate schermo. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Itr</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterabile</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coords</parametername>
</parameternamelist>
<parameterdescription>
<para>Collezione di coordinate schermo da pickare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Set delle entità che sono state pickate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/input/Picker.hpp" line="55" column="21" bodyfile="fn/core/input/Picker.hpp" bodystart="93" bodyend="119"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_picker_1a786e3176bfec9f7616614c02c1a95d12" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="_picker_8hpp_1a6818eeea1c24804525bb1abc1b16af67" kindref="member">pickid</ref></type>
        <definition>pickid Picker::to_pickid</definition>
        <argsstring>(fn::Eid input) const</argsstring>
        <name>to_pickid</name>
        <param>
          <type><ref refid="namespacefn_1a6b50c9f0e2b5922bc2348ed71840a29d" kindref="member">fn::Eid</ref></type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Converte un Eid in un pickid. </para>
        </briefdescription>
        <detaileddescription>
<para>Per evitare possibili errori della funzione glReadPixels() alla lettura di valori molto vicini, l&apos;eid è trasformato in un pickid, un identificativo univoco con una differenza più marcata.</para>
<para><simplesect kind="return"><para>colore dell&apos;entità da usare per il draw. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/input/Picker.hpp" line="66" column="9" bodyfile="fn/core/input/Picker.hpp" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_picker_1a747c4014f2abd655dce84aab87a1ac4b" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="_picker_8hpp_1a6818eeea1c24804525bb1abc1b16af67" kindref="member">pickid</ref></type>
        <definition>pickid Picker::to_pickid</definition>
        <argsstring>(fn::Entity input) const</argsstring>
        <name>to_pickid</name>
        <param>
          <type><ref refid="classfn_1_1_entity" kindref="compound">fn::Entity</ref></type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/input/Picker.hpp" line="67" column="9" bodyfile="fn/core/input/Picker.hpp" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="class_picker_1ade7e0399eb3cfd80589a2b2dca059568" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacefn_1a6b50c9f0e2b5922bc2348ed71840a29d" kindref="member">fn::Eid</ref></type>
        <definition>fn::Eid Picker::to_eid</definition>
        <argsstring>(pickid input) const</argsstring>
        <name>to_eid</name>
        <param>
          <type><ref refid="_picker_8hpp_1a6818eeea1c24804525bb1abc1b16af67" kindref="member">pickid</ref></type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>
        </briefdescription>
        <detaileddescription>
<para>Converte un pickid in un Eid.</para>
<para>Effettua la trasformazione inversa da colore a Eid.</para>
<para><simplesect kind="return"><para>Eid corrispondente al colore pickato. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fn/core/input/Picker.hpp" line="76" column="10" bodyfile="fn/core/input/Picker.hpp" bodystart="76" bodyend="76"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Classe che implementa il picking delle entità dalla scena. </para>
    </briefdescription>
    <detaileddescription>
<para>Il funzionamento è molto semplice e simile ad una chiamata draw<orderedlist>
<listitem><para>Si chiama la funzione <ref refid="class_picker_1ac5d1a34383c7636fa4ad82575bbb0607" kindref="member">begin()</ref> la quale pulisce il color buffer con colore nero. e attiva lo shader necessario per il picking il quale disegnerà ogni oggetto con un diverso colore a seconda del suo eid.</para>
</listitem><listitem><para>Tutte le entità interessate al picking sono disegnate con la funzione <ref refid="class_picker_1a6b88333b808ec80b96338249dca9965f" kindref="member">Picker::draw</ref></para>
</listitem><listitem><para>Passando poi le posizioni del mouse alle funzioni pick_color o pick verranno restituiti gli eid che sono stati toccati.</para>
</listitem><listitem><para>In fine va richiamata la funzione <ref refid="class_picker_1a3c2a862e2d09c5ed36a33e1280cd5434" kindref="member">end()</ref> per pulire il framebuffer e disabilitare lo shader </para>
</listitem></orderedlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="11">
        <label>std::bitset&lt; Bits &gt;</label>
      </node>
      <node id="6">
        <label>fn::Database</label>
        <link refid="classfn_1_1_database"/>
        <childnode refid="7" relation="usage">
          <edgelabel>eid_pool</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_components</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::unordered_map&lt; Cid, std::shared_ptr&lt; fn::IComponentArray &gt; &gt;</label>
        <childnode refid="9" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::stack&lt; Eid &gt;</label>
      </node>
      <node id="3">
        <label>Shader</label>
        <link refid="class_shader"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_fShaderSrc</edgelabel>
          <edgelabel>m_vShaderSrc</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>fn::IComponentArray</label>
        <link refid="classfn_1_1_i_component_array"/>
      </node>
      <node id="1">
        <label>Picker</label>
        <link refid="class_picker"/>
        <childnode refid="2" relation="usage">
          <edgelabel>shader</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_database</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="9">
        <label>std::shared_ptr&lt; fn::IComponentArray &gt;</label>
        <childnode refid="10" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::string</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::shared_ptr&lt; Shader &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="fn/core/input/Picker.hpp" line="22" column="1" bodyfile="fn/core/input/Picker.hpp" bodystart="23" bodyend="90"/>
    <listofallmembers>
      <member refid="class_picker_1ac5d1a34383c7636fa4ad82575bbb0607" prot="public" virt="non-virtual"><scope>Picker</scope><name>begin</name></member>
      <member refid="class_picker_1a6b88333b808ec80b96338249dca9965f" prot="public" virt="non-virtual"><scope>Picker</scope><name>draw</name></member>
      <member refid="class_picker_1a3c2a862e2d09c5ed36a33e1280cd5434" prot="public" virt="non-virtual"><scope>Picker</scope><name>end</name></member>
      <member refid="class_picker_1ac8ae02c4d9fb9c6bb7fac1fb8fe3a98c" prot="private" virt="non-virtual"><scope>Picker</scope><name>inbegin</name></member>
      <member refid="class_picker_1a5c2beb1df018889079eeb0d31967ff38" prot="private" virt="non-virtual"><scope>Picker</scope><name>m_database</name></member>
      <member refid="class_picker_1aa4238a506b3e33ccf7224ce403551511" prot="public" virt="non-virtual"><scope>Picker</scope><name>pick</name></member>
      <member refid="class_picker_1a88c5f57a2cdd688e080d3ca949f609d8" prot="public" virt="non-virtual"><scope>Picker</scope><name>Picker</name></member>
      <member refid="class_picker_1a1818bcef3d377d2397ba2d40ec1c5c82" prot="protected" virt="non-virtual"><scope>Picker</scope><name>S_DEFAULT_FRAGMENT_SHADER</name></member>
      <member refid="class_picker_1ab480596bec6dc7bf438a60357be53aae" prot="protected" virt="non-virtual"><scope>Picker</scope><name>S_DEFAULT_VERTEX_SHADER</name></member>
      <member refid="class_picker_1ac0b79996723201972ef92e6a5cbdbf67" prot="private" virt="non-virtual"><scope>Picker</scope><name>shader</name></member>
      <member refid="class_picker_1ade7e0399eb3cfd80589a2b2dca059568" prot="protected" virt="non-virtual"><scope>Picker</scope><name>to_eid</name></member>
      <member refid="class_picker_1a786e3176bfec9f7616614c02c1a95d12" prot="protected" virt="non-virtual"><scope>Picker</scope><name>to_pickid</name></member>
      <member refid="class_picker_1a747c4014f2abd655dce84aab87a1ac4b" prot="protected" virt="non-virtual"><scope>Picker</scope><name>to_pickid</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
